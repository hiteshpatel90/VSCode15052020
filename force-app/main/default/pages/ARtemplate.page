<apex:page applyBodyTag="false" applyHtmlTag="false" showChat="false" showHeader="false" sidebar="false" showQuickActionVfHeader="false" standardStylesheets="false" controller="CS_ARTemplateCC" extensions="CS_ARCCExtension">
    <!-- <apex:form> -->
        <html>
            <style type="text/css">
            
                .navBG{
                    height:100%;
                    position:fixed !important;
                    background: #212121;
                }
            
                .nav-header{
                    background:transparent !important;
                }

                div.row div.no-pad {
                    padding-left: 0px !important;
                    padding-right: 0px !important;
                }
            
                .fc-event{
                    background-color: #18A689 ;
                    padding: 4px 6px !important;
                }

                .fc-state-down, .fc-state-active{
                    background-color: #222326 !important;
                    border-color: #222326 !important;
                    color: #ffffff !important;
                    /*background-image: none !important;*/
                }

                .fc-state-default {
                    text-shadow: 0 0px 0px rgba(0, 0, 0, 0) !important;
                    box-shadow: inset 0 0px 0 rgba(0, 0, 0, 0), 0 0 0 rgba(0, 0, 0, 0) !important; 
                }
                /* Adds style to scrollbars */
                ::-webkit-scrollbar {
                width: 7px;
                }
                ::-webkit-scrollbar-thumb {
                background-color: RGBA(47, 64, 80, .9);
                border-radius: 7px;
                }
                ::-webkit-scrollbar-track {
                background-color: RGB(210, 210, 210);
                }

                .navHeaderPad{
                    padding-top:10px !important;
                    padding-bottom: 9px !important;
                }

                .userColor{
                    color:white !important;
                }

                /* added by Chad, needs to be moved to styleEdited */

                ul.nav.nav-right,ul.nav.nav-right > li,ul.nav.nav-right > li > a  {
                    display: inline;
                }
                div.nav-right-container {
                    height: 56px;
                    line-height: 56px;

                }
                
                .nav-tabs > li > a.tab-skinny {
                    padding: 10px;
                }
                i.tab-busy {
                    position: relative;
                    top: 12px;
                }
                h2.title-icon-container {
                    margin-left: 10px;
                }
                h2.title-icon-container > i {
                    position: relative;
                    top: -4px;
                }

                input.readonly-typeahead[readonly=true] {
                    cursor: pointer;
                    background-color: #fff
                }

                nav.navbar-static-side2 {
                    width: 220px;
                }
                
                .modal-header{
                    background-color: #151516 !important;
                }
                
                
                /*.dropdown {
                    position: relative;
                    display: inline-block;
                }
                
                .dropdown-content {
                    top: 40px;
                    background-color: #f9f9f9;
                    min-width: 160px;
                    min-height: 150px;
                    overflow: auto;
                    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
                    padding: 12px 16px;
                    display: none;
                    position: absolute;
                    z-index: 2;
                }*/

                .btn-custom {
                    background-color: hsl(0, 0%, 94%) !important;
                    background-repeat: repeat-x;
                    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#F9F9F9",
                        endColorstr="#E5E5E5");
                    background-image: -khtml-gradient(linear, left top, left bottom, from(#F9F9F9),
                        to(#E5E5E5));
                    background-image: -moz-linear-gradient(top, #F9F9F9, #E5E5E5);
                    background-image: -ms-linear-gradient(top, #F9F9F9, #E5E5E5);
                    background-image: -webkit-gradient(linear, left top, left bottom, color-stop(0%, #F9F9F9),
                        color-stop(100%, #E5E5E5));
                    background-image: -webkit-linear-gradient(top, #F9F9F9, #E5E5E5);
                    background-image: -o-linear-gradient(top, #F9F9F9, #E5E5E5);
                    background-image: linear-gradient(#F9F9F9, #E5E5E5);
                    border-color: #c9c9c9 #c9c9c9 hsl(0, 0%, 68.5%);
                    color: #333 !important;
                    text-shadow: 0 1px 1px rgba(255, 255, 255, 0.69);
                    -webkit-font-smoothing: antialiased;
                    font-size: 15px;
                    font-family: "Verdana";
                }
                .ddBtn{
                    background-color: white !important;
                    border: 1px solid #e5e6e7;
                }
                .ddActive {
                    background-color: #000 !important;
                    color: #ffffff !important;
                }
                
                .dropdown {
                    position: relative;
                    display: inline-block;
                }
                
                .dropdown-content {
                    top: 40px;
                    background-color: #f9f9f9;
                    min-width: 160px;
                    min-height: 200px;
                    overflow: auto;
                    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
                    padding: 12px 16px;
                    display: none;
                    position: absolute;
                    /*z-index: 2;*/
                    z-index: 10;
                }
                
                /*Added by srinivas sattoor on 6.26.2017 for 4.1
                This will set the font on selected team
                */
                .selectedTeamCSS{
                    font-family: "open sans", "Helvetica Neue", Helvetica, Arial, sans-serif ;
                    font-size: 14px ;
                    color: #676a6c ; 
                }
                
                #treeOpportunityTeam{
                    width: 230px;
                }
                
                #treeOpportunityTeam ul{
                    padding-left: 10px;
                }
                
                #treeCaseTeam{
                    width: 840px;
                }
                
                #treeCaseTeam ul{
                    padding-left: 10px;
                }
                
                .daredevel-tree {
                    border: none !important;
                }
                .daredevel-tree li{
                    padding-top: 5px;
                }

                .modal.modal-authrex .close{
                    opacity: 1;
                }
                
                .productDivider{
                    border-bottom: solid 1px grey;
                    padding-bottom: 5px;
                    margin-bottom: 10px;
                }
                
                /* added by chad */
                span.open-task-count {
                    background-color:#b94a48;
                    color: #ffffff;
                }
                #treeTaskTeam{
                    width: 230px;
                }
                
                #treeTaskTeam ul{
                    padding-left: 10px;
                }                
                /* added by chad */

                /* start styles for inbox jquery plugin */
                
                #inbox span.inbox-badge {
                    background-color:#b94a48;
                    color: #ffffff;
                }
                /* end styles for inbox jquery plugin */
                
                /*
                this font will be used for drop down options on list views
                */
                .dropdownFont{
                    font: arial;
                    font-weight: bold;
                }
                /*Added by srinivas sattoor on 07.12.2017 for 4.1 to add grey background on team in edit view*/
                .inputDisabled{
                    background-color:lightgrey !important;
                }
            </style>
            
            <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />

                <title>{!$Label.CS_Axis}</title>

                <script src="/soap/ajax/32.0/connection.js" type="text/javascript"/>
                <script src="/soap/ajax/32.0/apex.js" type="text/javascript"/> 

                <link href="{!$Resource.AxisTemplate}/Axis/css/bootstrap.min.css" rel="stylesheet" />
                <link href="{!$Resource.AxisTemplate}/Axis/font-awesome/css/font-awesome.css" rel="stylesheet" />

                <!-- Toastr style -->
                <link href="{!$Resource.AxisTemplate}/Axis/css/plugins/toastr/toastr.min.css" rel="stylesheet" />

                <!-- Gritter -->
                <link href="{!$Resource.AxisTemplate}/Axis/js/plugins/gritter/jquery.gritter.css" rel="stylesheet" />

                <!-- Select2 -->
                <link href="//cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/css/select2.min.css" rel="stylesheet" />

                <link href="{!$Resource.AxisTemplate}/Axis/css/animate.css" rel="stylesheet" />
                <!--<link href="{!$Resource.AxisTemplate}/Axis/css/style.css" rel="stylesheet" />-->
                
                <!-- Axis template style overrides -->
                <link href="{!$Resource.styleEdited}" rel="stylesheet" />
                <!--<link href="{!$Resource.AxisTemplate}/Axis/css/plugins/fullcalendar/fullcalendar.css" rel="stylesheet" />-->

                <!-- Full calendar -->
                <link href="{!$Resource.AxisTemplate}/Axis/css/plugins/fullcalendar/fullcalendar.css" rel="stylesheet" />
                <!-- <link href="{!$Resource.AxisTemplate}/Axis/css/plugins/fullcalendar/fullcalendar.print.css" rel="stylesheet" media="print" /> -->

                <!-- bootstrap table sorter -->
                <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.css"/>
                
                <!-- CSS Chart -->
                <link rel="stylesheet" href="{!$Resource.ChartistCSS}"/>
                
                <!-- datetime picker from CDN to bypass template overrides -->
                <apex:stylesheet value="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.15.35/css/bootstrap-datetimepicker.min.css"/>

                <!-- CS specific styles -->
                <link href="{!$Resource.AxisTemplate}/Axis/css/cs_style.css" rel="stylesheet" />

                <!-- slick -->
                <link rel="stylesheet" type="text/css" href="//cdn.jsdelivr.net/jquery.slick/1.5.9/slick.css"/>
 
                <!-- summernote -->
                <!-- <link href="//cdnjs.cloudflare.com/ajax/libs/summernote/0.8.1/summernote.css" rel="stylesheet"/> -->

                <!-- <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.10.0/css/bootstrap-select.min.css" /> -->
                <!-- Latest compiled and minified CSS -->
                <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.11.2/css/bootstrap-select.min.css"></link>
                
                <link rel="stylesheet" href="{!$Resource.JqueryTreeCSS}"></link>
                
                <link rel="stylesheet" href="{!$Resource.JQueryTreeMultiSelect}/dist/jquery.tree-multiselect.css"></link>
                <!-- @mention -->
                <!--
                <link href='http://localhost:8000/jquery.mentionsInput.css' rel='stylesheet'/>
                -->
                <!-- Arthrex style sheets for detail, ag-grid and activity added by srinivas sattoor 04.14.2017-->
                <link rel="stylesheet" href="{!$Resource.ArthrexCSS}"></link>
                
                <!-- <link rel="stylesheet" href="{!$Resource.Summernote}"></link> -->
                <!-- include summernote css/js-->
                <link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.3/summernote.css" rel="stylesheet"></link>
                <script src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.3/summernote.js"></script>
                
                <style type="text/css">
                    [hidden], template {
                        display: block;
                    }
                    div.cprofile-image > img {
                        width: 110px;
                        height: 110px;
                        border-radius: 50%;
                    }

                    div.logo {
                        background-image: url({!$Resource.AxisTemplate}/Axis/img/axis-logo.png);
                        background-repeat: no-repeat;
                        height: 56px;
                        width: 100px;
                        background-size: contain;
                        padding: 0px;
                        margin: auto;                    
                        background-position: center center;
                    }
                    
                     /*
                    For active
                    */
                    
                    .metismenu > li.active{
                        border-left: none !important;
                        background: #222326 !important;
                    }
                    
                    /*
                    For hover
                    */
                    
                    .metismenu > li > a:hover{
                        background: #222326 !important;
                    }
                    /*
                    For Boder top
                    */
                    div.ibox-content, div.ibox-title, div.iboxARB{
                        border-top-color: #151516 !important;
                    }
                    
                    .btn-primary{
                        background-color: #3A9DDB !important;
                        border-color: #3A9DDB !important;
                    }
                </style>


            </head>

            <body>
                <div id="navbar wrapper sidebarWrapper">

                <!--    <nav class="navBG navbar-default navbar-static-side" role="navigation"> -->
                    <nav class="navBG navbar-default navbar-static-side2" role="navigation" style="background: #151516;overflow-y: auto;">
                
                        <div class="sidebar-collapse">
                            <ul class="nav metismenu" id="side-menu">
                                <!--<li class="nav-header" class="navHeaderPad">-->
                                <li>
                                    <center>
                                    <div class="dropdown profile-element navHeaderPad"> 
                                        <span>

                                            <a href="ARProfile">
                                                <div class="cprofile-image">
                                                    <img src=""/>
                                                </div>
                                            </a>
                                        </span>
                                        <a data-toggle="dropdown" class="dropdown-toggle" href="#">
                                            <span class="clear"> 
                                                <a href="ARProfile">
                                                <span class="userColor text-muted text-xs block uname" style="font-weight:bold"></span> 
                                                </a>
                                            </span> 
                                        </a>

                                    </div>
                                    </center>
                                    <div class="logo-element" style="padding-left:15px; text-align:left">
                                        {!$Label.CS_Axis}
                                    </div>
                                </li>
                                <!--</li>-->
                                <li class="GremoveMarginL" id="home"><a href="ARHome"><i class="fa fa-home"></i> <span class="nav-label">{!$Label.CS_Home}</span></a></li>
                                <li class="GremoveMarginL" id="myProfile"><a href="ARProfile"><i class="fa fa-user"></i> <span class="nav-label">My Profile</span></a></li>
                                <li class="GremoveMarginL" id="inbox"><a href="ARInbox"><i class="fa fa-bell"></i> <span class="nav-label">Notifications</span>&nbsp;&nbsp;<span class="badge inbox-badge" style="display:none"></span></a></li> 
                                <li  class="GremoveMarginL" id="Surgeons"><a href="ARSurgeons"><i class="fa fa-user-md"></i> <span class="nav-label">Surgeons</span></a></li>
<!--                                 <li class="GremoveMarginL" id="contact"><a href="ARContacts"><i class="fa fa-group"></i> <span class="nav-label">{!$Label.CS_Contacts}</span></a></li>   
 -->                                <li class="GremoveMarginL" id="account"><a href="ARAccounts"><i class="fa fa-hospital-o"></i> <span class="nav-label">{!$Label.CS_ProvidersTab}</span></a></li>                             
                                <li class="GremoveMarginL" id="cases"><a href="ARCases"><i class="fa fa-calendar"></i> <span class="nav-label">{!$Label.CS_Cases}</span></a></li>
                                <li class="GremoveMarginL" id="opportunities"><a href="AROpportunityDB"><i class="fa fa-line-chart"></i> <span class="nav-label">{!$Label.CS_Opportunities}</span></a></li>
<!--                               <li  class="GremoveMarginL" id="reports"><a href="ARReports"><i class="fa fa-pie-chart"></i> <span class="nav-label">{!$Label.CS_Reports}</span></a></li>
 -->                               <li  class="GremoveMarginL" id="reports"><a href="ARReports3"><i class="fa fa-pie-chart"></i> <span class="nav-label">{!$Label.CS_Reports}</span></a></li>
 
                                <li  class="GremoveMarginL" id="leads"><a href="ARLeads"><i class="fa fa-star"></i> <span class="nav-label">Leads</span></a></li>

                                <!-- below <li> added by chad -->
                                <li  class="GremoveMarginL" id="tasks"><a href="ARTasks"><i class="fa fa-tasks fa-rotate-180"></i> <span class="nav-label">Tasks&nbsp;&nbsp;<span class="badge open-task-count" style="position:relative;top:-2px;display:none">0</span></span></a></li>  
                            
                                <li  class="GremoveMarginL visible-xs visible-sm" id="mobileApp"><a href="ARMobileApp"><i class="fa fa-mobile" style="font-size:1.5em"></i> <span class="nav-label">Mobile App</span></a></li>
                            </ul>
                                                      
                        </div>
                    </nav>
                </div>
                    <div id="page-wrapper" class="gray-bg dashbard-1">

                        <div class="row border-bottom">
                            <div class="col-sm-4 col-xs-4 no-pad">
                                <div class="navbar-header">
                                    <a class="navbar-minimalize minimalize-styl-2 btn btn-primary " href="#"><i class="fa fa-bars"></i> </a>
                                    <h2 class="pull-left title-icon-container"><i class="fa fa-home"></i></h2>
                                </div>
                            </div>
                            <div class="col-sm-4 col-xs-8 no-pad">
                                <div class="logo"></div>
                            </div>
                            <div class="col-lg-4 col-md-12 col-sm-12 col-xs-12 nav-right-container text-center">
                                <ul class="nav nav-right">

                                    <li>
                                        <!-- custom logout page to ARLogout -->
                                        <a href="#" class="open-help"  >
                                            <i class="fa fa-life-buoy"></i> Help and Feedback
                                        </a>
                                    </li>                                
                                    <li>
                                        <!-- custom logout page to ARLogout -->
                                        <a href="{!$Site.Prefix}/ARLogout">
                                            <i class="fa fa-sign-out"></i> {!$Label.CS_Logout}
                                        </a>
                                    </li>

                                </ul>
                            </div>
                        </div>
                        <apex:insert name="bodyContent" />

                    </div>
                    
                    <div id="eula" class="modal" role="dialog">

                        <div class="modal-dialog">
                        
                            <div class="modal-content">
                              
                                <div class="modal-header">
                                    <h4 class="modal-title">Eula <i class="fa fa-refresh fa-spin eula-busy" style="display:none"></i></h4>
                                </div>

                                <div class="modal-body">

                                    <div class="form-group">
                                        <p>{!$Label.CS_EULA}</p>
                                    </div>
                                </div>
                                
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default eula-cancel-btn" data-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary eula-save-btn">I Agree</button>
                                </div>                        

                            </div>
                        
                        </div>            

                    </div>
                    <!-- Case prop modal used by the ARCases page and the ARContacts page -->
                    <div class="modal fade  modal-authrex" id="case-prop-modal" data-current-user="{!$User.Id}" data-backdrop="static" tabindex="-1" role="dialog">
                      <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                          <div class="modal-header">
                            <button type="button" class="close case-cancel-btn" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title"><i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;<span class="modal-title-txt">{!$Label.CS_CreateCase}</span></h4>
                          </div>
                          <div class="modal-body casePropModalPicker">
                            
                            <div class="row">
                                <div class="form-group col-sm-6">
                                    <span class="text-danger">*</span><label class="control-label">{!$Label.CS_StartDate}</label>
                                    <div class="input-group date start-date-container">
                                        <input type="text" class="form-control date start-date clear-on-close" readonly="true" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>
                                </div>
                                <div class="form-group col-sm-6">
                                    <span class="text-danger">*</span><label class="control-label">{!$Label.CS_EndDate}</label>
                                    <div class="input-group date end-date-container">
                                        <input type="text" class="form-control date end-date clear-on-close" readonly="true" />
                                        <span class="input-group-addon">
                                            <span class="glyphicon glyphicon-calendar"></span>
                                        </span>
                                    </div>                            
                                </div> 
                                
                                <div class="form-group col-sm-12" id ="divCaseTeam">
                                    <label for="case-team" class="control-label" style="display: block;">
                                        <span class="text-danger">*</span> Team<i class="team-busy fa fa-refresh fa-spin" style="display:none"></i>
                                    </label>
                                 <div id="divCaseTeamFacet" class="dropdown col-sm-12" style="padding-left: 0px; padding-right: 0px;">
                                     <span>
                                        <button id="caseTeamButton" class="btn btn-custom ddBtn col-xs-12" onclick="showDD('caseTeamButton', event);" style="border: 1px solid lightgrey;height: 34px;">
                                        <span class="text selectedTeamCSS" style="float: left;"> </span>
                                        <i class="fa fa-caret-down" style="float: right;"></i>
                                            </button>
                                        </span>
                                     <div class="dropdown-content">
                                         <div id="treeCaseTeam">
                                         </div>
                                     </div> 
                                 </div>
                                </div>
                                        
                                <div class="form-group col-sm-12">
                                    <span class="text-danger">*</span><label class="control-label">{!$Label.CS_Providers} <i class="provider-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <input type="text" data-record-id="" class="form-control provider case-provider-typeahead clear-on-close required"/>
                                </div>

                                <div class="form-group col-sm-12">
                                    <span class="text-danger">*</span><label class="control-label">{!$Label.CS_Practitioners} <i class="practitioner-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <input type="text" data-record-id="" class="form-control practitioner clear-on-close case-practitioner-typeahead required" />
                                </div> 
                                
                                <!-- <div class="form-group col-sm-12">
                                    <span class="text-danger">*</span><label class="control-label">Procedure <i class="procedures-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <input type="text" data-record-id="" class="form-control procedure clear-on-close procedure-typeahead has-dependents required" />
                                    <div class="procedures ctag-list clear-on-close"></div>
                                </div> -->
                                
                                <!-- <div class="form-group col-sm-12" id="divCaseSurgicalTechnique">
                                    <label class="control-label">Surgical Technique <i class="surgical-technique-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <input type="text" data-record-id="" class="form-control surgical-technique clear-on-close surgical-technique-typeahead has-dependents required" />
                                    <div class="surgical-technique ctag-list clear-on-close"></div>
                                </div> -->
                                
                                <!-- <div class="form-group col-sm-12" id="divCasePreferenceCard">
                                    <label class="control-label">Preference Card</label>
                                    <select class="form-control prefcards clear-on-close" disabled="true"></select>
                                    <div class="pref-cards ctag-list clear-on-close"></div>
                                </div> -->

                                <!--
                                <div class="form-group col-sm-12">                        
                                    <label class="control-label">{!$Label.CS_Products} <i class="products-busy fa fa-refresh fa-spin" style="display:none"></i></label> &nbsp;<button type="button" class="btn btn-xs btn-primary btn-clear-products">Clear</button>
                                    <input type="text" class="case-products-typeahead form-control clear-on-close required" placeholder="Add by name"/>
                                    <div class="products ctag-list clear-on-close"></div>
                                </div>
                                -->
                                
                                <div class="form-group col-sm-12" id="divCaseOwner"><span class="text-danger">*</span>
                                    <label class="control-label">Case Owner <i class="case-owner-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <!-- <select class="form-control case-owner" onchange="populateProvidersTypeaheadOnCases(), populatePractitionersTypeaheadOnCases()"></select> -->
                                    <!-- Modified for 4.1,CDID-000428 by Srinivas Sattoor on 7.14.2017 -->
                                    <select class="form-control case-owner"></select>
                                    <input type="hidden" id="hidden-case-owner" name="hidden-case-owner" />
                                </div>
                                      
                                <!-- <div class="form-group col-sm-12" id="divCaseParticipatants">                        
                                    <label class="control-label">{!$Label.CS_Case_Participants} <i class="participants-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <input type="text" class="case-participants-typeahead form-control clear-on-close" placeholder="Add by name"/>
                                    <div class="participants ctag-list clear-on-close"></div>
                                </div>    -->   

                                <div class="form-group col-sm-12" id="divCaseStatus"><span class="text-danger">*</span>
                                    <label class="control-label">Status <i class="status-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                    <select class="form-control status"></select>
                                </div>
                                
                                <div class="row" id="divCaseTaxonomy">
                                    <div class="col-sm-12">
                                        <div class="table-responsive">
            
                                            <table class="table table-condensed pcard-procedures productTeam" id = "tableTaxonomy" style="margin-bottom:0px">
                                                <!-- <caption><h3>{!$Label.AROpportunity_Products}</h3></caption> -->
                                                <thead>
                                                    <tr>
                                                        <th style="width:28%"><span class="text-danger">*</span><label class="control-label">Product Team</label></th>
                                                        <th style="width:30%"><span class="text-danger">*</span><label class="control-label">Procedure</label></th>
                                                        <th style="width:26%">Surgical Technique </th> 
                                                        <th style="width:16%">&nbsp;</th>
                                                    </tr>
                                                    <tr class="trhidePicklistRow">
                                                        <td>
                                                            <!-- <input type="text" id="pcard-productteam" class="form-control pcard-productteam pcard-productteam-typeahead" autocomplete="off"/> -->
                                                            <select id="select-productteam" class="form-control"  onchange="productTeamSelected('#case-prop-modal' , this.value)">
                                                                <option value=""> Select Product Team </option>
                                                            </select>
                                                        </td>
                                                        <td> 
                                                            <div id="divProcedures" class="input-group" style="display: none;">
                                                                <input type="text" id="procedures" class="form-control procedures other-procedures-typeahead"
                                                                        placeholder="Other Procedure" />
                                                                <span class="input-group-btn">
                                                                    <button class="btn btn-default" type="button" onclick="addOtherProcedure()">+</button>
                                                                </span>
                                                                <span class="input-group-btn">
                                                                    <button class="btn btn-error" type="button" onclick="resetProcedureSelection('#case-prop-modal')">x</button>
                                                                </span>
                                                            </div>
                                                            <select id="select-procedure" class="form-control default-color selectpicker" multiple="multiple" 
                                                                        data-style="default-color"   data-selected-text-format="static"
                                                                        data-width="250px" title="Procedures" data-container=".casePropModalPicker">
                                                                
                                                            </select> 
                                                            <div class="dropdown">
                                                                <div class="dropdown-content">
                                                                    <div id="divNewProcedure">
                                                                        <div class="form-group">
                                                                            <label for="newProcedure">Other Procedure</label>
                                                                            <input type="text" class="form-control newProcedure-typeahead" id="newProcedure" placeholder="New Procedure"/>
                                                                        </div>
                                                                        <button type="button" class="btn btn-default">Add</button>
                                                                    </div>
                                                                </div>
                                                            </div> 
                                                            <div class="procedures ctag-list clear-on-close"></div> 
                                                        </td>
                                                        <td>
                                                            <!-- <input type="text" id="surgical-technique" class="form-control surgical-technique surgical-technique-typeahead"/>
                                                            <div class="surgical-technique ctag-list clear-on-close"></div> -->
                                                            
                                                            <div id="divSurgicalTechnique" class="input-group" style="display: none;">
                                                                <input type="text" id="surgical-technique" class="form-control surgical-technique surgical-technique-typeahead"
                                                                        placeholder="Other surgical-technique"/>
                                                                <span class="input-group-btn">
                                                                    <button class="btn btn-default" type="button" onclick="addOtherProcedure()">+</button>
                                                                </span>
                                                            </div>
                                                            <select id="select-surgical-technique" class="form-control default-color selectpicker" multiple="multiple" 
                                                                        data-style="default-color" data-selected-text-format="static"
                                                                        data-width="250px" title="Surgical Techniques" data-container=".casePropModalPicker">
                                                                
                                                            </select>
                                                            
                                                           <div class="dropdown"  >
                                                                <div class="dropdown-content">
                                                                    <div id="divNewSurgicalTechnique">
                                                                        <div class="form-group">
                                                                            <label for="newSurgicalTechnique">Other Surgical Technique</label>
                                                                            <input type="text" class="form-control newSurgicalTechnique-typeahead" id="newSurgicalTechnique" placeholder="New Surgical Technique"/>
                                                                        </div>
                                                                        <button type="button" class="btn btn-default">Add</button>
                                                                    </div>
                                                                </div>
                                                            </div> 
                                                            
                                                            
                                                            <div class="surgical-technique ctag-list clear-on-close"></div>
                                                        </td> 
                                                        <td style="vertical-align:middle;text-align:right">
                                                            <span class="text-danger save-add-error"></span>
                                                            <button type="button" class="btn btn-xs btn-primary btn-add-taxonomy" onclick="addTaxonomy('#case-prop-modal')"> Add</button>
                                                        </td>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>  
                                </div>
                                                    
                            </div>
                          </div>
                            
                          <div class="modal-footer">
                            <span class="text-danger save-error"></span>
                            <button type="button" style="display:none" class="pull-left btn btn-warning case-delete-btn">Delete</button>
                            <button type="button" class="btn btn-default case-cancel-btn">Close</button> 
                            <button type="button" class="btn btn-primary case-save-btn" >Save</button>
                            <button type="button" class="btn btn-primary case-save-and-btn">Save and Continue</button> 
                            <button type="button" class="btn btn-primary case-detail-save-and-btn" style="display:none">Save and Continue</button>
                          </div>
                        </div><!-- /.modal-content -->
                      </div><!-- /.modal-dialog -->
                    </div><!-- /.modal -->  
                    <div id="right-sidebar">
                        <div class="sidebar-container">

                            <ul class="nav nav-tabs navs-2">

                                <li class="active"><a data-toggle="tab" href="#tab-1">
                                    Today's Agenda
                                </a></li>
                            </ul>

                            <div class="tab-content">
                                <div id="tab-1" class="tab-pane active">
                                <!--
                                    <div class="sidebar-title">
                                        <h3> <i class="fa fa-comments-o"></i>Today's Agenda</h3>
                                        <small><i class="fa fa-tim"></i> You have 10 new message.</small>
                                    </div>
                                -->
                                    <div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a1.jpg" />

                                                    <div class="m-t-xs">
                                                        <i class="fa fa-star text-warning"></i>
                                                        <i class="fa fa-star text-warning"></i>
                                                    </div>
                                                </div>
                                                <div class="media-body">

                                                    There are many variations of passages of Lorem Ipsum available.
                                                    <br />
                                                    <small class="text-muted">Today 4:21 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a2.jpg" />
                                                </div>
                                                <div class="media-body">
                                                    The point of using Lorem Ipsum is that it has a more-or-less normal.
                                                    <br />
                                                    <small class="text-muted">Yesterday 2:45 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a3.jpg" />

                                                    <div class="m-t-xs">
                                                        <i class="fa fa-star text-warning"></i>
                                                        <i class="fa fa-star text-warning"></i>
                                                        <i class="fa fa-star text-warning"></i>
                                                    </div>
                                                </div>
                                                <div class="media-body">
                                                    Mevolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).
                                                    <br />
                                                    <small class="text-muted">Yesterday 1:10 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a4.jpg" />
                                                </div>

                                                <div class="media-body">
                                                    Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the
                                                    <br />
                                                    <small class="text-muted">Monday 8:37 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a8.jpg" />
                                                </div>
                                                <div class="media-body">

                                                    All the Lorem Ipsum generators on the Internet tend to repeat.
                                                    <br />
                                                    <small class="text-muted">Today 4:21 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a7.jpg" />
                                                </div>
                                                <div class="media-body">
                                                    Renaissance. The first line of Lorem Ipsum, "Lorem ipsum dolor sit amet..", comes from a line in section 1.10.32.
                                                    <br />
                                                    <small class="text-muted">Yesterday 2:45 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a3.jpg" />

                                                    <div class="m-t-xs">
                                                        <i class="fa fa-star text-warning"></i>
                                                        <i class="fa fa-star text-warning"></i>
                                                        <i class="fa fa-star text-warning"></i>
                                                    </div>
                                                </div>
                                                <div class="media-body">
                                                    The standard chunk of Lorem Ipsum used since the 1500s is reproduced below.
                                                    <br />
                                                    <small class="text-muted">Yesterday 1:10 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                        <div class="sidebar-message">
                                            <a href="#">
                                                <div class="pull-left text-center">
                                                    <img alt="image" class="img-circle message-avatar" src="{!$Resource.AxisTemplateImages}/img/a4.jpg" />
                                                </div>
                                                <div class="media-body">
                                                    Uncover many web sites still in their infancy. Various versions have.
                                                    <br />
                                                    <small class="text-muted">Monday 8:37 pm</small>
                                                </div>
                                            </a>
                                        </div>
                                    </div>
                                </div>

                                <input id="caseRecId" style="visibility: hidden" />
                            </div>
                        </div>
                    </div>
              
                <!-- Code Updated by Mimansha(4/17/2017) for CID-000177(Save Warning Modal) in Help Modal    -->
                <div id="help" class="modal fade modal-authrex" role="dialog"  data-backdrop="static" style="color:#676a6c; font-size:13px;">
                    <div class="modal-dialog">
                
                        <!-- Modal content-->
                        <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close help-cancel-btn">&times;</button>
                            <h4 class="modal-title">Contact Us</h4>
                        </div>
                        
                        <div class="modal-body help-form">
                            <form action="{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}/servlet/servlet.WebToCase?encoding=UTF-8" method="POST" id="contactForm">
                            <!-- <form action="https://webto.salesforce.com/servlet/servlet.WebToCase?encoding=UTF-8" method="POST" id="contactForm"> -->

                                <input type="hidden" name="orgid" value="{!$Organization.Id}" id="orgid"/>
                                <input type="hidden" name="retURL" value="{!LEFT($CurrentPage.URL,FIND('/',$CurrentPage.URL,9))}?contactsubmitted" id="retURL"/>
                                
                                <div class="form-group">
                                    <label for="name" class="control-label"><span class="text-danger">*</span> Contact Name</label>
                                    <input  id="name" class="form-control name" type="text" />
                                </div>
    
                                <div class="form-group">
                                    <label for="email" class="control-label"><span class="text-danger">*</span> Email</label>
                                    <input  id="email" class="form-control email" type="text" />
                                </div>
    
                                <div class="form-group">
                                    <label for="phone" class="control-label"><span class="text-danger">*</span> Phone</label>
                                    <input  id="phone" class="form-control phone" type="text" />
                                </div>
    
                                <div class="form-group">
                                    <label for="type" class="control-label"><span class="text-danger">*</span> Type</label>
                                    <select class="form-control type"></select>
    
                                </div>
                                
                                <div class="form-group">
                                    <label for="description" class="control-label"><span class="text-danger">*</span> Description</label>
                                    <textarea class="form-control description" ></textarea>
                                </div>
                                
                                <div class="error text-danger"></div>
                                <br/>
                            
                                <div class="form-group">
                                    <input type="hidden" name="subject" value="AXIS Support Ticket - Authenticated User."/>
                                    <input type="button" class="btn btn-primary block full-width m-b" name="submit" value="Submit" onclick="validateAndSubmit()"/>
                                </div>
                                <!-- <div class="form-group">
                                    <button class="btn btn-primary block full-width submit-help m-b">Submit</button>
                                    <div class="error text-danger"></div>
                                </div> -->
                                
                            </form>

                        </div>
                        </div>
                
                    </div>
                </div>

                <div class="modal fade  modal-authrex" id="session-timeout-modal" data-backdrop="static" tabindex="-1" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title">&nbsp;&nbsp;<span class="modal-title-txt">Session Timeout</span></h4>
                            </div>
                            <div class="modal-body">
                
                                <div class="text-center">
                
                                    Your session has been timed out due to inactivity for an extended period.
                                    <br /><br />
                                    Please <a href="{!$Site.BaseUrl}/ARLogin">click here</a> to log back in.
                
                                </div>
                            </div>
                
                            <div class="modal-footer">
                                <button type="button" class="btn btn-default case-cancel-btn" data-dismiss="modal">Close</button>
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->
                
                <!--CID - 000177/Mimansha Samal/April/17/2017/Contact Us Save Warning Modal -->
                <div class="modal fade  modal-authrex" id="cancel-help" data-backdrop="static" tabindex="-1" role="dialog" >
   
                    <div class="modal-dialog" style="width:450px">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title">&nbsp;&nbsp;Contact Us</h4>
                            </div>
    
                            <div class="modal-body">
                                <div class="row">
                                    <div>
                           
                                        <label>Do you want to save the changes you made for Contact Us? </label>
                                          
                                    </div>
                                </div>
                            </div>
    
                            <div class="modal-footer">
                                <span class="text-danger save-error"></span>
                       
                                <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.CS_Yes}</button>
                                <button type="button" class="btn btn-primary btn-close-contact-us-warning">{!$Label.CS_No}</button>
                        
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->
                
                <!--CID - 000177/Mimansha Samal/April/17/2017/ Add/Edit Case Save Warning Modal -->
                <div class="modal fade  modal-authrex" id="cancel-case-prop-modal" data-backdrop="static" tabindex="-1" role="dialog" >
   
                    <div class="modal-dialog" style="width:450px">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title"><i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Case</h4>
                            </div>
    
                            <div class="modal-body">
                                <div class="row">
                                    <div>
                           
                                        <label>Do you want to save the changes you made for the Case? </label>
                                          
                                    </div>
                                </div>
                            </div>
    
                            <div class="modal-footer">
                                <span class="text-danger save-error"></span>
                       
                                <button type="button" class="btn btn-default" data-dismiss="modal">{!$Label.CS_Yes}</button>
                                <button type="button" class="btn btn-primary btn-cancel-case-warning">{!$Label.CS_No}</button>
                        
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->
                
                <!-- Begining of Opportunity Modal -->
                <!-- Added by Srinivas Sattoor 04.24.2017 release 3.1.2 CID-000180 -->
                <div id="opportunity-modal" class="modal fade modal-authrex" role="dialog" data-backdrop="static" tabindex="-1" >
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close opportunity-type-cancel-btn" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title">
                                    <i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;
                                    <span class="modal-title-txt">{!$Label.AROpportunity_NewOpp}</span>
                                </h4>
                            </div>
                            <div class="modal-body">
                                <div class="row">
                                    <div class="form-group col-sm-6">
                                        <div class="form-group col-sm-12">
                                            <label for="opportunity-name" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_OppoName} </label>
                                            <input  id="opportunity-name" class="form-control opportunity-name clear-on-close"  type="text"></input>
                                            <input type="hidden" id="hidden-opportunity-name" name="hidden-opportunity-name" />
                                            <input type="hidden" id="opportunityId" name="hidden-opportunity-id" /> 
                                         </div>
                                         <div class="form-group col-sm-12">
                                             <label for="opportunity-type" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_OppType} </label>
                                             <select  id="opportunity-type" class="form-control opportunity-type clear-on-close" onchange="setCloseLostReasons(''), setCompetitiveConversion(this.value), showOpportunityFields(this.value), removeOpportunityStageNameOptions(this.value, 'Qualified'), removeOpportunityProductCategories(this.value, 'none')">
                                                 <option value="0">- {!$Label.CS_Select} -</option>
                                             </select>
                                             <input type="hidden" id="hidden-opportunity-type" name="hidden-opportunity-type" />
                                         </div> 
                                         <div class="form-group col-sm-12">
                                             <label for="surgeon" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_Surgeon} <i class="surgeon-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                             <input  id="surgeon" class="form-control surgeon-typeahead" type="text" />
                                              <div class="surgeon ctag-list clear-on-close"></div>
                                        </div> 
                                        <div class="form-group col-sm-12"> 
                                             <label for="close-date" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_ProjectedCloseDate}</label>
                                             <div class="input-group date close-date-container">
                                                 <input  id="close-date" class="form-control close-date clear-on-close" type="text" />
                                                 <span class="input-group-addon">
                                                     <span class="glyphicon glyphicon-calendar"></span>
                                                 </span>
                                             </div>
                                         </div>
                                        <div class="form-group col-sm-12">
                                            <label for="stage" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_Stage}</label>
                                            <select  id="stage" class="form-control stage" onchange="populateCloseLostReasonsOnEditModal('', 'this.value'), setCloseLostReasons(this.value)">
                                                <option value="0">- {!$Label.CS_Select} -</option>
                                            </select>
                                        </div> 
                                        <div class="form-group col-sm-12" id="divClosedLostReason" style="display:none">
                                            <label for="closed-lost-reason" class="control-label"><span class="text-danger">*</span>{!$Label.AROpportunity_CloseLostReason}</label>
                                            <i class="opportunity-closed-lost-reason-busy fa fa-refresh fa-spin" style="display:none"></i>
                                            <select  id="closed-lost-reason" class="form-control opportunity-closed-lost-reason clear-on-close">
                                                <option value="0">- {!$Label.CS_Select} -</option>
                                          </select>
                                        </div>
                                    </div>
                                    <div class="form-group col-sm-6" >
                                        <div class="form-group col-sm-12"  id="divAccountTeam" style="display:none">
                                            <label for="createdBy" class="control-label">Team</label>
                                            <span class="form-control" id="account-team" readonly="true"  disabled ="true"></span>  
                                        </div>
                                        <div class="form-group col-sm-12" id ="divOpportunityTeam">
                                            <label for="opportunity-team" class="control-label" style="display: block;">
                                                <span class="text-danger">*</span> Team<i class="owner-busy fa fa-refresh fa-spin" style="display:none"></i>
                                            </label>
                                            <div id="divOpportunityTeamFacet" class="dropdown col-sm-12" style="padding-left: 0px; padding-right: 0px;">
                                                <span>
                                                    <button id="teamOpportunityButton" class="btn btn-custom ddBtn col-xs-12" onclick="showDD('teamOpportunityButton', event);" style="border: 1px solid lightgrey;height: 34px;">
                                                        <span class="text selectedTeamCSS" style="float: left;"> </span>
                                                        <i class="fa fa-caret-down" style="float: right;"></i>
                                                    </button>
                                                </span>
                                                <div class="dropdown-content">
                                                    <div id="treeOpportunityTeam">
                                                    </div>
                                                </div>
                                                <!-- <input type="hidden" id="hidden-opportunity-team" name="hidden-opportunity-team" /> -->
                                            </div>
                                        </div>
                                        <!-- <div class="form-group col-sm-12" id ="divOpportunityTeam" style="display:none">
                                            <label for="opportunity-team" class="control-label"><span class="text-danger">*</span> Team<i class="owner-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                            <select  id="opportunity-team" class="form-control opportunity-team" onchange="populateSurgeonTypeaheadOnOpportunity(), populateProviderTypeaheadOnOpportunity()"></select>
                                            <input type="hidden" id="hidden-opportunity-team" name="hidden-opportunity-team" />
                                         </div>  -->
                                        <div class="form-group col-sm-12">
                                             <label for="account" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_Account} <i class="account-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                             <input  id="account" class="form-control account account-typeahead clear-on-close" type="text" />
                                        </div>
                                        <div class="form-group col-sm-12">
                                            <label for="opportunity-owner" class="control-label"><span class="text-danger">*</span> {!$Label.AROpportunity_OppoOwner} <i class="owner-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                            <select  id="opportunity-owner" class="form-control opportunity-owner"></select>
                                            <input type="hidden" id="hidden-opportunity-owner" name="hidden-opportunity-owner" />
                                         </div>
                                         <div class="form-group col-sm-12">
                                            <label for="productCategory" class="control-label"><span class="text-danger">*</span>{!$Label.AROpportunity_ProductCategory}<i class="owner-busy fa fa-refresh fa-spin" style="display:none"></i></label>
                                            <select  id="productCategory" class="form-control productCategory clear-on-close" >
                                                <option value="0">- {!$Label.CS_Select} -</option>
                                            </select>
                                            <input type="hidden" id="hidden-productCategory" name="hidden-productCategory" />
                                        </div>
                                         
                                         <div class="form-group col-sm-12" id ="divCompetitiveConversion">
                                             <label for="competitive-conversion" class="control-label"><span class="text-danger">*</span>{!$Label.AROpportunity_CompetitiveConv}</label>
                                             <select  id="competitive-conversion" class="form-control competitive-conversion clear-on-close" onchange="setCompetitiveComapny(this.value)">
                                                 <option value="0">- {!$Label.CS_Select} -</option>
                                             </select>
                                             <input type="hidden" id="hidden-competitive-conversione" name="hidden-competitive-conversion" />
                                         </div>
                                         <div class="form-group col-sm-12" id ="divCompetitiveCompany" style="display:none">
                                             <label for="competitive-company" class="control-label"><span class="text-danger">*</span>{!$Label.AROpportunity_CompetitiveCo}</label>
                                             <select  id="competitive-company" class="form-control competitive-company clear-on-close" >
                                                 <option value="0">- {!$Label.CS_Select} -</option>
                                             </select>
                                             <input type="hidden" id="hidden-competitive-company" name="hidden-competitive-company" />
                                         </div> 
                                    </div>
                                    <hr/>
                                    <span id="spanDivider" class="col-sm-12 productDivider">Opportunity Type Details</span>
<!--                                    <span id="oppDetailsTxt" class="col-sm-12 ">Please select opportunity type to see details</span>
 -->                                    <div class="row" id="divOpportunityTypeDetails" style="display:none">
                                        <div class="form-group col-sm-6">
                                            <div class="form-group col-sm-12" id="divQuoteId" style="display:none">
                                                 <label for="quoteId" class="control-label"> {!$Label.AROpportunity_QuoteID}</label>
                                                 <input  id="quoteId" class="form-control quoteId" type="text" />
                                             </div>
                                             <div class="form-group col-sm-12" id="divQuoteDate" style="display:none">
                                                 <label for="quoteDate" class="control-label">{!$Label.AROpportunity_QuoteDate}</label>
                                                 <div class="input-group date close-date-container">
                                                     <input  id="quoteDate" class="form-control quoteDate clear-on-close" type="text" />
                                                     <span class="input-group-addon">
                                                         <span class="glyphicon glyphicon-calendar"></span>
                                                     </span>
                                                 </div>
                                             </div>
                                             <div class="form-group col-sm-12" id="divEstimatedInstallDate" style="display:none">
                                                 <label for="estimatedInstallDate" class="control-label">{!$Label.AROpportunity_EstimatedInstallDate}</label>
                                                    <div class="input-group date close-date-container">
                                                     <input  id="estimatedInstallDate" class="form-control estimatedInstallDate clear-on-close" type="text" />
                                                     <span class="input-group-addon">
                                                         <span class="glyphicon glyphicon-calendar"></span>
                                                     </span>
                                                 </div>
                                             </div>
                                             <div class="form-group col-sm-12" id="divEnrollmentFormType" style="display:none">
                                                 <label for="enrollmentFormType" class="control-label"> {!$ObjectType.Opportunity.fields.Enrollment_Form_Type__c.Label}</label>
                                                 <select  id="enrollmentFormType" class="form-control enrollmentFormType" >
                                                    <option value="0">- {!$Label.CS_Select} -</option>
                                                 </select> 
                                             </div> 
                                             <div class="form-group col-sm-12" id="divEnrollmentFormsSent" style="display:none">
                                                 <label for="enrollmentFormsSent" class="control-label"> {!$ObjectType.Opportunity.fields.Enrollment_Forms_Sent__c.Label}</label>
                                                 <div class="input-group date close-date-container">
                                                     <input  id="enrollmentFormsSent" class="form-control enrollmentFormsSent clear-on-close" type="text" />
                                                     <span class="input-group-addon">
                                                         <span class="glyphicon glyphicon-calendar"></span>
                                                     </span>
                                                 </div> 
                                             </div>
                                        </div>
                                        <div class="form-group col-sm-6">
                                             <div class="form-group col-sm-12" id="divContractYears" style="display:none">
                                 <label for="contractYears" class="control-label">{!$Label.AROpportunity_ContractYears}</label>
                                 <input  id="contractYears" class="form-control contractYears" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divAnnualNumberofProcedures" style="display:none">
                                 <label for="annualNumberOfProcedures" class="control-label"> {!$Label.AROpportunity_AnnualNoOfProcedure}</label>
                                 <input  id="annualNumberOfProcedures" class="form-control annualNumberOfProcedures" onchange="populateTotalAnnualRevenue()" onkeypress="return OnlyNum(event)" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divPotentialRevenuePerCase" style="display:none">
                                 <label for="potentialRevenuePerCase" class="control-label"> {!$Label.AROpportunity_PotentialRevPerCase}</label>
                                 <input  id="potentialRevenuePerCase" class="form-control potentialRevenuePerCase" onchange="populateTotalAnnualRevenue()" onkeypress="return OnlyNum(event)" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divPatientVolume" style="display:none">
                                 <label for="patientVolume" class="control-label"> {!$Label.AROpportunity_PatientVolume}</label>
                                 <input  id="patientVolume" class="form-control patientVolume" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divPotentialUserNumber" style="display:none">
                                 <label for="potentialUserNumber" class="control-label"> {!$Label.AROpportunity_PotentialUserNumber}</label>
                                 <input  id="potentialUserNumber" class="form-control potentialUserNumber" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divPotentialRevenuePerTower" style="display:none">
                                 <label for="potentialRevenuePerTower" class="control-label">{!$Label.AROpportunity_PotentialRevPerTower}</label>
                                 <input  id="potentialRevenuePerTower" class="form-control potentialRevenuePerTower" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divDisposablePurchaseValue" style="display:none">
                                 <label for="disposablePurchaseValue" class="control-label">{!$Label.AROpportunity_DisposablePurchaseValue}</label>
                                 <input  id="disposablePurchaseValue" class="form-control disposablePurchaseValue" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divTotalNumOfTowers" style="display:none">
                                 <label for="totalNumOfTowers" class="control-label">{!$Label.AROpportunity_TotalNoOfTower}</label>
                                 <input  id="totalNumOfTowers" class="form-control totalNumOfTowers" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divTotalNumOfORs" style="display:none">
                                 <label for="totalNumOfORs" class="control-label">{!$Label.AROpportunity_TotalNoOfOR}</label>
                                 <input  id="totalNumOfORs" class="form-control totalNumOfORs" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divEquipmentCost" style="display:none">
                                 <label for="equipmentCost" class="control-label">{!$Label.AROpportunity_EquipmentCost}</label>
                                 <input  id="equipmentCost" class="form-control equipmentCost" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divNoChargeEquipmentValue" style="display:none">
                                 <label for="noChargeEquipmentValue" class="control-label">{!$Label.AROpportunity_NoChargeEquipValue}</label>
                                 <input  id="noChargeEquipmentValue" class="form-control noChargeEquipmentValue" onchange="populateTotalAnnualRevenue()"  type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divTotalAnnualPotential" style="display:none">
                                 <label for="totalAnnualPotential" class="control-label">{!$Label.AROpportunity_TotalAnnualPotential}</label>
                                 <input  id="totalAnnualPotential" class="form-control totalAnnualPotential" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divLaborAndMaterials" style="display:none">
                                 <label for="laborAndMaterials" class="control-label">{!$Label.AROpportunity_LaborAndMaterials}</label>
                                 <input  id="laborAndMaterials" class="form-control laborAndMaterials" onchange="populateTotalAnnualRevenue()" type="text" />
                             </div> 
                             <div class="form-group col-sm-12" id="divTotalBudgetary" style="display:none">
                                 <label for="totalBudgetary" class="control-label">{!$Label.AROpportunity_TotalBudgetary}</label>
                                 <input  id="totalBudgetary" class="form-control totalBudgetary" type="text" />
                             </div>
                             <div class="form-group col-sm-12" id="divFinalPOAmount" style="display:none">
                                 <label for="finalPOAmount" class="control-label">{!$Label.AROpportunity_FinalPOAmount}</label>
                                 <input  id="finalPOAmount" class="form-control finalPOAmount" type="text" />
                             </div>
                                        </div>
                                    </div>
                                    <div class="row" id="divOpportunityLineItems" >
                            <div class="col-xs-12">
                                <div class="table-responsive">

                                    <table class="table table-condensed product-parts related-table" style="margin-bottom:0px">
                                        <caption><h3>{!$Label.AROpportunity_Products}</h3></caption>
                                        <thead>
                                            <tr>
                                                <th style="width:22.5%">{!$Label.AROpportunity_PartNumber}</th>
                                                <th style="width:34.5%">{!$Label.AROpportunity_Description}</th>
                                                <th style="width:10%">{!$Label.AROpportunity_Qty}</th>
                                                <th style="width:15%">{!$Label.AROpportunity_UnitPrice}</th>
                                                <th style="width:15%">{!$Label.AROpportunity_TotalPrice}</th>
                                                <th style="width:10%">&nbsp;</th>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <input type="text" class="form-control opportunity-part-number opportunity-part-number-typeahead"/>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control opportunity-part-description opportunity-part-description-typeahead"/>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control opportunity-part-quantity"/>
                                                </td>
                                                <td>
                                                    <input type="text" class="form-control opportunity-part-unit-price"/>
<!--                                                            <p class="form-control-static opportunity-part-unit-price"></p>
 -->                                                        </td>
                                                <td>
                                                    <p class="form-control-static opportunity-part-total-price readonly-control"></p>
                                                    
                                                </td>
                                                <td style="vertical-align:middle;text-align:right">
                                                    <button class="btn btn-xs btn-primary add-opp-part" disabled="true" onclick="addPart()">Add</button>
                                                </td>
                                            </tr>
                                        </thead>
                                        <tbody>
                                                                         
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="3">&nbsp;</td>
                                                <td>Total</td>
                                                <td id="totalProductAmount">-</td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        </div>  <!-- End of Products Row -->  
                                </div>  <!-- end of row -->
                            </div>
                            <div class="modal-footer">
                                <span class="text-danger save-error" id="newOppErrors"></span>
                                 
                              <button type="button" class="btn btn-default opportunity-type-cancel-btn">Cancel</button>
                              <button type="button" class="btn btn-primary opportunity-save-btn"> Save</button> 
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->
                <!-- End of  Opportunity Modal -->
                 
                <!--CID - 000041/Swetha P/Dec/9/2016/New Opportunity warning  Card -->
                <div class="modal fade  modal-authrex" id="cancel-new-opportunity-modal" data-backdrop="static" tabindex="-1" role="dialog" >
       
                    <div class="modal-dialog" style="width:450px">
                        <div class="modal-content">
                            <div class="modal-header">
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                <h4 class="modal-title"><i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Opportunity</h4>
                            </div>
    
                            <div class="modal-body">
                                <div class="row">
                                    <div>
                                        <label>Do you want to save the changes you made for the opportunity? </label> 
                                    </div>
                                </div>
                            </div> 
                            <div class="modal-footer">
                                <span class="text-danger save-error"></span>
                                <button type="button" class="btn btn-default" data-dismiss="modal">Yes</button>
                                <button type="button" class="btn btn-primary btn-cancel-opportunity-card">No</button>
                            </div>
                        </div><!-- /.modal-content -->
                    </div><!-- /.modal-dialog -->
                </div><!-- /.modal -->  
                <!--CID - 000041/Swetha P/Dec/9/2016/New Opportunity warning  Card -->

                <!-- This modal use to live in ARTasks but I moved it here becuase it's used in a couple different pages - Chad 2017-06-22 -->

                <div id="task-modal" class="modal fade modal-authrex" role="dialog" data-backdrop="static" tabindex="-1" >
                    <div class="modal-dialog modal-lg">
                
                        <!-- Modal content-->
                        <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title create">
                                <i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Create <span class="task-type-label">General</span>&nbsp;Task
                            </h4>
                            <h4 class="modal-title edit" style="display:none">
                                <i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Edit <span class="task-type-label">General</span>&nbsp;Task
                            </h4>
                            <h4 class="modal-title clone" style="display:none">
                                <i class="fa fa-plus-square-o"></i>&nbsp;&nbsp;Clone <span class="task-type-label">General</span>&nbsp;Task
                            </h4>
                        </div>
                        
                        <div class="modal-body" >
                            <p/> 
                            <div class="row data-views">

                                    <div class="form-group col-xs-6">

                                        <div class="form-group col-sm-12">
                                            <label class="control-label">Type</label> 
                                            <select class="form-control task-type clear-on-close">
                                                <option value="general">General</option>
                                                <option value="surgeon" class="hide-on-create">Surgeon</option>
                                                <option value="account" class="hide-on-create">Account</option>
                                                <option value="opportunity">Opportunity</option>
                                                <option value="case">Surgical Case</option>
                                            </select>
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close association-container hide-on-close" style="display:none">
                                            <div class="clearfix" style="margin-bottom:3px">
                                                <label for="accountId" class="control-label m-b-none pull-left">
                                                    Associated <span class="association-label"></span>
                                                </label>
                                                <button class="btn btn-xs btn-primary association-button pull-right">
                                                    View List <i class="fa fa-refresh fa-spin list-view-busy" style="display:none"></i>
                                                </button>
                                            </div>
                                            <input type="text" class="form-control associated-object clear-on-close" readonly="true"/>
                                            
                                        </div>

                                        <div class="form-group col-sm-12">
                                            <label class="control-label">Team</label>
                                            <div class="dropdown col-sm-12" style="padding-left: 0px; padding-right: 0px;">
                                                 <span>
                                                    <button id="taskTeamButton" class="btn btn-default note-btn col-xs-12" onclick="showDD('taskTeamButton', event);" style="border: 1px solid lightgrey;height: 34px;">
                                                        <span class="text selectedTeamCSS" style="float: left;"> </span>
                                                        <i class="fa fa-caret-down" style="float: right; color:#333;top:3px;position:relative"></i>
                                                    </button>
                                                 </span>
                                                 <div class="dropdown-content">
                                                     <div id="treeTaskTeam">
                                                     </div>
                                                 </div> 
                                             </div>
                                         </div>

                                        <div class="form-group col-sm-12 hide-on-close account-container" style="display:none">
                                            <label for="accountId" class="control-label">Account</label>
                                            <input type="text" class="form-control clear-on-close task-type-control account" readonly="true"/>
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close surgeon-container" style="display:none">
                                            <label class="control-label visible-leads-app">Attendee</label> 
                                            <label class="control-label hidden-leads-app">Surgeon</label> 
                                            <div class="surgeon ctag-list clear-on-close"></div>
                                            
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close visible-leads-app" style="display:none">
                                            <label for="status" class="control-label">Contact Name</label> 
                                            <input class="form-control contactName" type="text" disabled="true"/>
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close methodOfContact-container visible-leads-app" style="display:none">
                                            <label for="status" class="control-label">Method of contact</label> 
                                            <input class="form-control methodOfContact" type="text" disabled="true"/>
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close contactEmail-container visible-leads-app" style="display:none">
                                            <label for="status" class="control-label">Contact Email</label> 
                                            <input class="form-control contactEmail" type="text" disabled="true"/>
                                        </div>

                                        <div class="form-group col-sm-12 hide-on-close contactPhone-container visible-leads-app" style="display:none">
                                            <label for="status" class="control-label">Contact Phone</label> 
                                            <input class="form-control contactPhone" type="text" disabled="true"/>
                                        </div>                                        

                                                                                                                      
                                    </div>

                                    <div class="form-group col-xs-6"> 

                                        <div class="form-group col-sm-12 clearfix">
                                            <label class="control-label"> Status</label> 
                                            <div class="btn-group status" style="display:block">
                                                
                                            </div>
                                        </div>

                                        <div class="form-group col-sm-12 clearfix">
                                            <label for="priority" class="control-label"> Priority </label> 
                                            <div class="btn-group priority" style="display:block">
                                                
                                            </div>
                                        </div>                                                                                            
                                        
                                        <div class="form-group col-sm-12">
                                            <label for="dueDate" class="control-label"> Due Date </label>
                                            <div class="input-group date dueDate-container">
                                                <input id="dueDate" class="form-control dueDate clear-on-close" type="text" />
                                                <span class="input-group-addon">
                                                    <span class="glyphicon glyphicon-calendar"></span>
                                                </span>
                                            </div>
                                        </div>
                                        
                                        <div class="form-group col-sm-12">
                                            <label for="task-owner" class="control-label">  Task Owner <i class="fa fa-refresh fa-spin owner-busy" style="display:none"></i></label>
                                            
                                            <select class="form-control task-owner"></select>
                                            <input type="text" class="form-control task-owner task-owner task-owner-typeahead"  style="display:none"/>
                                            
                                            <span class="text-danger owner-error"></span>
                                        </div>
                                        <div class="form-group col-sm-12 hide-on-create">
                                            <label for="createdBy" class="control-label">Created By</label>
                                            <span class="form-control createdBy" id="createdBy" readonly="true"  disabled ="true"></span>  
                                        </div>


                                    </div> 

                                    <div class="form-group col-sm-12">
                                        <label for="taskDetails" class="control-label">
                                            <span class="text-danger">*</span>
                                            Task Description&nbsp;
                                            
                                            
                                        </label>

                                        <!-- default to free form text only -->
                                        <select class="form-control clear-on-close subject" style="display:none">                                            
                                        </select>
                                        <div class="input-group other-subject col-xs-12">
                                            <input type="text" class="form-control other-subject clear-on-close"/>
                                            <span class="help-text text-danger required subject" style="display:none">This field is required</span>
                                            <span class="input-group-btn" style="display:none">
                                                <button class="btn btn-default cancel-other-subject">Cancel</button>
                                            </span>
                                        </div>
                                    </div>
                                    
                                    <div class="form-group col-sm-12 visible-leads-app leadsAppAction-container"  style="display:none">
                                      <label for="taskNotes" class="control-label">Leads App Action</label> 
                                      <input type="text" class="form-control leadsAppAction clear-on-close" disabled="true"/>
                                    </div>

                                    <div class="form-group col-sm-12">
                                      <label for="taskNotes" class="control-label">Comments</label> 
                                      <textarea class="form-control description clear-on-close" rows="3" style="min-width: 100%"></textarea> 
                                    </div>

                                    <div class="form-group col-sm-12 hide-on-close visible-leads-app" style="display:none">
                                      <label for="taskNotes" class="control-label">Notes</label> 
                                      <textarea class="form-control notes clear-on-close" rows="3" style="min-width: 100%"></textarea> 
                                    </div>

                            </div> <!-- End of row div --> 

                            <!-- opp grid view in modal -->
                            <div class="list-views task-opp-grid" style="display:none">
                                <div class="row">
                                    <div class="col-sm-3 text-left">
                                        <input type="text" class="search form-control task-opp-grid" placeholder="Search ..."/>
                                    </div>
                                    <div class="col-sm-9 text-right">
                                        <button class="btn btn-default btn-xs close-list-view m-b">Cancel</button>                                        
                                    </div>
                                </div>
                                <div class="row m-b">
                                    <div class="col-xs-12">
                                        <div id="taskOppGrid" style="border:thin; border-color:gray; height: 400px;width:100%" class="ag-bootstrap"></div>
                                    </div>
                                </div>
                                <div class="row bootstrap-font">
                                    <div class ="col-sm-6">
                                        Showing <span class="value" id="task-opp-grid-lbFirstRow">1</span> to <span class="value" id="task-opp-grid-lbLastRow">5</span> of <span class="value" id="task-opp-grid-lbPageSize"></span> rows 
                                        <select class="pager-size-change task-opp-grid">
                                            <option value="20">20</option>
                                            <option value="40">40</option>
                                            <option value="60">60</option>
                                            <option value="80">80</option>
                                            <option value="100">100</option>
                                            <option value="All">All</option>
                                        </select>
                                        records per page
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="pull-right task-opp-grid">
                                            <button class="btn btn-xs btn-primary task-opp-grid pager-control first">To First</button>
                                            <button class="btn btn-xs btn-primary task-opp-grid pager-control previous">To Previous</button>
                                            <button class="btn btn-xs btn-primary task-opp-grid pager-control next">To Next</button>
                                            <button class="btn btn-xs btn-primary task-opp-grid pager-control last">To Last</button>   
                                        </div>
                                        
                                    </div>
                                </div>
                                
                            </div>
                            <!-- end opp grid in modal -->

                            <!-- opp grid view in modal -->
                            <div class="list-views task-case-grid " style="display:none">
                                
                                
                                <div class="row">
                                    <div class="col-sm-3 text-left">
                                        <input type="text" class="search form-control task-case-grid" placeholder="Search ..."/>
                                    </div>
                                    <div class="col-sm-9 text-right">
                                        <button class="btn btn-default btn-xs close-list-view m-b">Cancel</button>                                        
                                    </div>
                                </div>
                                <div class="row m-b">
                                    <div class="col-xs-12">
                                        <div id="taskCaseGrid" style="border:thin; border-color:gray; height: 400px;width:100%" class="ag-bootstrap"></div>
                                    </div>
                                </div>
                                <div class="row bootstrap-font">
                                    <div class ="col-sm-6">
                                        Showing <span class="value" id="task-case-grid-lbFirstRow">1</span> to <span class="value" id="task-case-grid-lbLastRow">5</span> of <span class="value" id="task-case-grid-lbPageSize"></span> rows 
                                        <select class="pager-size-change task-case-grid">
                                            <option value="20">20</option>
                                            <option value="40">40</option>
                                            <option value="60">60</option>
                                            <option value="80">80</option>
                                            <option value="100">100</option>
                                            <option value="All">All</option>
                                        </select>
                                        records per page
                                    </div>
                                    <div class="col-sm-6">
                                        <div class="pull-right task-case-grid">
                                            <button class="btn btn-xs btn-primary task-case-grid pager-control first">To First</button>
                                            <button class="btn btn-xs btn-primary task-case-grid pager-control previous">To Previous</button>
                                            <button class="btn btn-xs btn-primary task-case-grid pager-control next">To Next</button>
                                            <button class="btn btn-xs btn-primary task-case-grid pager-control last">To Last</button>   
                                        </div>
                                        
                                    </div>
                                </div>
                                
                            </div>
                            <!-- end opp grid in modal -->

                        </div>
                        <div class="modal-footer">
                            
                            
                            <div class="clearfix">
                                <div class="pull-left text-left">
                                    <!--
                                    <button type="button" class="btn btn-warning delete" style="display:none">Delete</button>   
                                    -->                                 
                                </div>

                                <div class="pull-right text-right">
                                    <span class="task-modal-error text-danger clear-on-close"></span>
                                    <button type="button" class="btn btn-default cancel" data-dismiss="modal">Cancel</button>
                                    <button type="button" class="btn btn-primary save">Save&nbsp;<i class="save-busy fa fa-fresh fa-spin"></i></button>
                                    
                                </div>                            
                            
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                <!-- end task modal -->
                
                <!-- Mainly scripts -->

                <!-- <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/fullcalendar/moment.min.js"></script> --><!-- Srini: replacing it with Moment.js plugins -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/moment/moment-with-locales.min.js"></script>
                
                <!-- script src="{!$Resource.AxisTemplate}/Axis/js/plugins/moment/moment-timezone-with-data.min.js"></script Yan: replaced moment timezone with CDN referece. This js is critical for calendar plugin dragndrop feature-->

                <script src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.5/moment-timezone-with-data.min.js"></script>
                
<!--                 <script src="{!$Resource.moment_timezone_with_data}"></script>
 -->                <script src="{!$Resource.AxisTemplate}/Axis/js/jquery-2.1.1.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/bootstrap.js"></script>
                <!--<script src="{!$Resource.AxisTemplate}/Axis/js/bootstrap.min.js"></script>-->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/metisMenu/jquery.metisMenu.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/slimscroll/jquery.slimscroll.min.js"></script>

                <!-- Flot -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/flot/jquery.flot.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/flot/jquery.flot.tooltip.min.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/flot/jquery.flot.spline.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/flot/jquery.flot.resize.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/flot/jquery.flot.pie.js"></script>

                <!-- Peity -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/peity/jquery.peity.min.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/demo/peity-demo.js"></script>

                <!-- Custom and plugin javascript -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/inspinia.js"></script>

                <!-- pace -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/pace/1.0.2/pace.min.js"></script>

                <!-- jQuery UI -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/jquery-ui/jquery-ui.min.js"></script>

                <!-- GITTER -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/gritter/jquery.gritter.min.js"></script>

                <!-- Sparkline -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/sparkline/jquery.sparkline.min.js"></script>

                <!-- Sparkline demo data  -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/demo/sparkline-demo.js"></script>

                <!-- ChartJS-->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/chartJs/Chart.min.js"></script>

                <!-- Toastr -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/toastr/toastr.min.js"></script>
                
                <!-- Datetimepicker -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.15.35/js/bootstrap-datetimepicker.min.js"></script>


                <!-- ICS plugin -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/ics.deps.min.js"></script>


                <script src="{!$Resource.AxisTemplate}/Axis/js/jquery-ui.custom.min.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/iCheck/icheck.min.js"></script>

                <!-- js color picker plugin-->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/jscolor/jscolor.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/jscolor/jscolor.min.js"></script>

                
                <!-- ag grid enterprise -->
                <!-- <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/ag-grid/ag-grid.js"></script> -->
                <script src="{!$Resource.agGrid}"></script>

                <script src="{!$Resource.fcjs2}"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/footable/footable.all.min.js"></script>
                
                <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js" />

                <apex:includeScript value="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.js" />
                
                <apex:includeScript value="{!URLFOR($Resource.AxisTemplate, '/Axis/js/plugins/dropzone/dropzone.js')}"/>
                
                <!--Bootstrap 3 typeahead -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/bootstrap3-typeahead/bootstrap3-typeahead.min.js"></script>
                
                <!--JS Chartist Script -->
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/chartist/chartist.min.js"></script>
                <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/chartist/chartist-plugin-fill-donut.min.js"></script>


                <!-- Bootstrap table sorter -->
                <script src="//cdnjs.cloudflare.com/ajax/libs/bootstrap-table/1.10.1/bootstrap-table.min.js"></script>
                <script src="{!$Resource.Bootstrap_Table_Filter}"></script>

                <!-- Random color generator -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/randomcolor/0.4.4/randomColor.js"></script>

                <!-- gmaps -->
<!--                 <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBJgFj-Lk5n4xhLnaqGQfdRDweZZg2t0wM&v=3.exp&sensor=false"></script>
 -->
                <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBS0jdDjy-3W82TOaaA4iUOAVF0_wIId-M&v=3.exp&sensor=false"></script>
                
                <!-- case modal -->
                <!-- <script src="{!URLFOR($Resource.AxisTemplate, '/Axis/js/cs-case-modal.js')}"></script> -->
                <script src="{!$Resource.CaseModalJS}"></script>
                
                <script src="{!$Resource.CaseModalJS}"></script>
<!--                 <script src="{!$Resource.OpportunityModalJS}"></script>
 -->
                <!-- @mention input and deps -->
                <script src='//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js'></script>

                <!-- touchswipe -->
                <script src='//cdnjs.cloudflare.com/ajax/libs/jquery.touchswipe/1.6.15/jquery.touchSwipe.min.js'></script>

                <!-- Accounting -->
                <script src="//cdnjs.cloudflare.com/ajax/libs/accounting.js/0.4.1/accounting.min.js"></script>

                <!-- Slick -->
                <script type="text/javascript" src="//cdn.jsdelivr.net/jquery.slick/1.5.9/slick.min.js"></script>

                <!-- Summernote -->
                 <script src="{!$Resource.AxisTemplate}/Axis/js/plugins/summernote/summernote.js"></script>             

                 <!-- select2 -->
                 <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.3/js/select2.full.min.js"></script>

                <!-- Bootstrap Responsive Tabs -->
                <script src="{!URLFOR($Resource.AxisTemplate, '/Axis/js/plugins/bootstrap-responsive-tabs/responsive-tabs.js')}"></script>
                
                <link rel="stylesheet" href="{!$Resource.SOLCSS}"></link>
                <script src="{!$Resource.SOLJquery}"></script>
                <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.10.0/js/bootstrap-select.min.js"></script> -->
                <!-- Latest compiled and minified JavaScript -->
                <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-select/1.11.2/js/bootstrap-select.min.js"></script>
                
                <script src="https://code.highcharts.com/highcharts.js"></script>
                <script src="https://code.highcharts.com/modules/funnel.js"></script>
                
                <script src="{!$Resource.JqueryTreeJS}"></script>
                <script src="{!$Resource.JQueryTreeMultiSelect}/dist/jquery.tree-multiselect.js"></script>
                

                <!-- required by the inbox plugin -->
                <!-- <script src="{!$Resource.json2_js}"></script>
                <script src="{!URLFOR($Resource.cometd, 'chad/cometd.js')}"></script>
                <script src="{!URLFOR($Resource.cometd, 'chad/jquery.cometd.js')}"></script> -->
                
                <!--
                <script src='http://localhost:8000/lib/jquery.events.input.js'></script>
                <script src='http://localhost:8000/lib/jquery.elastic.js'></script>
                <script src='http://localhost:8000/jquery.mentionsInput.js'></script>
                -->

                <script>
                    var SESSION_TIMEOUT;
                    
                    function resetSession(){
                    
                        clearTimeout(SESSION_TIMEOUT);
                        
                        SESSION_TIMEOUT = setTimeout(showTimeoutPopup, {!$Setup.Session_Settings__c.Session_Timeout__c});   //  timeout is in milliseconds. 10000 == 10secs
                        
                    }   //  end of resetSession
                    
                    function showTimeoutPopup(){
                        $("#session-timeout-modal").modal('show')
                    }   //  end of showTimeoutPopup
                
                    function obj2ctag(obj, readonly) {
                         var label = obj.Name;
                         var id = obj.Id;
                
                         var ctag = '<span class="ctag alert alert-info" data-record-id="'+id+'" data-label="'+label+'">';
                         ctag += label;
                         if ( !readonly ) {
                           ctag += '&nbsp;<span data-role="remove-tag"></span>';
                         }
                
                         ctag += '</span>';
                         return ctag;
                     } 
                    
                    $("div.ctag-list").on("click","[data-role=remove-tag]", function() {
                        // removes tags from a tag-list
                        $(this).parent().remove();
                    });
                    
                    // global function available everywhere the template is used ( all authenticated pages )
                    // safelt decodes HTML Encoded text
                    // see http://stackoverflow.com/questions/1147359/how-to-decode-html-entities-using-jquery
                    window.globalDecodeEntities = function globalDecodeEntities(encodedString) {

                        if ( encodedString ) {
                            var div = document.createElement('div');
                            div.innerHTML = encodedString;
                            return div.textContent;
                        } else {
                            return encodedString;
                        }
                    };
                    
                    window.escapeSpecialChars = function(text) {
                        var replaceedTxt = text.replace(/[-[\]{}()*+?.,\\/^$|#\s]/g, "\\\$&");
                      return replaceedTxt;
                    };
                    
                    function setSurgicalTechniques(modalId, proceduresFromList, isMultiSelect){ 
                        var procedure;
                        var procedureIds = [];
                        
                        if(proceduresFromList){
                            $("#" + modalId + " div.procedures").children().each(function() {
                                procedureIds.push($(this).attr("data-record-id"));
                            });
                            procedure = procedureIds.join("::");
                        } else {
                            procedure = $("#" + modalId + " input.procedure").attr("data-record-id");
                        } 
                        
                        Visualforce.remoting.Manager.invokeAction('CS_ARTemplateCC.searchSurgicalTechniques', procedure,
                        function(result, event) {
                        
                            console.log("Surgical Techniques for Procedures: " + JSON.stringify(result));
                            var surgicalTechs = [];
                            
                            $.each(result, function(i, v){
                                surgicalTechs.push(v["Child_Procedure__r"]);
                            });
                            
                            
                            surgicalTechnique = surgicalTechs;
            
                            // setup the practitioner type ahead options
                            var surgeTypeAheadOptions = {
                                minLength: 0,
                                items: 50,
                                source: surgicalTechnique,
                                showHintOnFocus: false,                    
                                displayText: function(item) {
                                    return globalDecodeEntities(item.Name);
                                },
                                afterSelect: function(item) {
                                    $("#" + modalId + " input.surgical-technique").attr("data-record-id", item.Id);
                                    $("#" + modalId + " input.surgical-technique").attr("data-record-name", item.Name);
                                    
                                    //setProductsFor(item.Id, false, modalId);
                                    
                                    if(isMultiSelect){
                                        if ( $("#" + modalId + "   span[data-record-id="+item.Id+"].ctag").length === 0 ) {
                                        
                                            $("#" + modalId + "  div.ctag-list.surgical-technique").append(obj2ctag(item));
                                        }
                                        $("#" + modalId + "  input.surgical-technique-typeahead").val("");
                                    }
                                    
                                }   //  end of afterSelect
            
                            };
            
                            // init the type ahead
                            $("#" + modalId + " input.surgical-technique-typeahead").typeahead('destroy','NoCached');
                            $("#" + modalId + " input.surgical-technique-typeahead").typeahead(surgeTypeAheadOptions);
                            
                        }); //  end of remote call
                    
                    }   //  end of setSurgicalTechniques
                    //swetha
                    
                    //Added by srinivas sattoor 04.24.2017 3.1.2 CID-000180
                   
                    //show opportunity fields based on opportunity type
                    function showOpportunityFields(opportunityType){ 
                        
                        $("#divOpportunityTypeDetails").show();
                        //hide Product Conversion fields
                        $("#divAnnualNumberofProcedures").hide();
                        $("#divPotentialRevenuePerCase").hide();
                        $("#divTotalAnnualPotential").hide();
                        $("#divCurrentFYRevenue").hide();
                        $("#tab-opportunityDetail div#divCompetitiveConversion").hide();
                        $("#tab-opportunityDetail div#divCompetitiveCompany").hide();
                        
                        //$("#tab-opportunityDetail div#divCompetitiveCompany").show();
                        
                        $("#opportunity-modal div#divAnnualNumberofProcedures").hide();
                        $("#opportunity-modal div#divPotentialRevenuePerCase").hide();
                        $("#opportunity-modal div#divTotalAnnualPotential").hide();
                        $("#opportunity-modal div#divCurrentFYRevenue").hide();
                        //$("#opportunity-modal div#divCompetitiveConversion").hide();
                        $("#opportunity-modal div#divCompetitiveCompany").hide();
                        
                        //hide SOS fields
                        
                        $("#divPatientVolume").hide();
                        $("#divPotentialUserNumber").hide();
                        
                        $("#opportunity-modal div#divPatientVolume").hide();
                        $("#opportunity-modal div#divPotentialUserNumber").hide();
                        
                        //hide Synergy Video fields
                        $("#divTotalNumOfTowers").hide();
                        $("#divPotentialRevenuePerTower").hide();
                        
                        $("#opportunity-modal div#divTotalNumOfTowers").hide();
                        $("#opportunity-modal div#divPotentialRevenuePerTower").hide();
                        
                        //hide Synergy Installation fields
                        $("#divTotalNumOfORs").hide();
                        $("#divEquipmentCost").hide();
                        $("#divLaborAndMaterials").hide();
                        $("#divTotalBudgetary").hide();
                        $("#divFinalPOAmount").hide();
                        $("#divEstimatedInstallDate").hide();
                        $("#divQuoteId").hide();
                         
                        $("#opportunity-modal div#divTotalNumOfORs").hide();
                        $("#opportunity-modal div#divEquipmentCost").hide();
                        $("#opportunity-modal div#divLaborAndMaterials").hide();
                        $("#opportunity-modal div#divTotalBudgetary").hide();
                        $("#opportunity-modal div#divFinalPOAmount").hide();
                        $("#opportunity-modal div#divEstimatedInstallDate").hide();
                        $("#opportunity-modal div#divProcedure").hide();
                        
                        //hide instrument purchase
                        $("#divTotalNumOfORs").hide();
                        $("#divTotalAnnualPotential").hide();
                        $("#divCurrentFYRevenue").hide();
                        $("#divQuoteNum").hide();
                        
                        $("#opportunity-modal div#divTotalNumOfORs").hide();
                        
                        //hide stocking order
                        $("#divTotalAnnualPotential").hide();
                        $("#divCurrentFYRevenue").hide();
                        $("#divQuoteDate").hide();
                        
                        //hide agreement
                        $("#divNoChargeEquipmentValue").hide();
                        $("#divDisposablePurchaseValue").hide();
                        $("#divContractYears").hide();
                        $("#divTotalAnnualPotential").hide();
                        $("#divCurrentFYRevenue").hide();
                        
                        $("#opportunity-modal div#divNoChargeEquipmentValue").hide();
                        $("#opportunity-modal div#divDisposablePurchaseValue").hide();
                        $("#opportunity-modal div#divContractYears").hide();
                        
                        $("#divOpportunityLineItems").show();
                        $("#divDetailOppLineItems").show(); 
                        
                        $("#spanDivider").text('Opportunity Type Details - ' + opportunityType);
                            
                        if(opportunityType == "Product Conversion"){
                        
                            $("#divAnnualNumberofProcedures").show();
                            $("#divPotentialRevenuePerCase").show();
                            $("#divTotalAnnualPotential").show();
                            $("#divCurrentFYRevenue").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").show();
                            
                            $("#opportunity-modal div#divAnnualNumberofProcedures").show();
                            $("#opportunity-modal div#divPotentialRevenuePerCase").show();
                            $("#opportunity-modal div#divTotalAnnualPotential").show();
                            $("#opportunity-modal div#divCurrentFYRevenue").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show(); 
                            
                        }else if(opportunityType == "SOS"){ 
                            
                             $("#divOpportunityLineItems").hide();
                             $("#divDetailOppLineItems").hide();
                             $("#opportunity-modal div#divCompetitiveConversion").hide();
                             $("#opportunity-modal div#divCompetitiveCompany").hide();
                             
                            $("#opportunity-modal div#divProcedure").hide();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").hide();
                            $("#opportunity-modal div#divEnrollmentFormType").show();
                            $("#opportunity-modal div#divEnrollmentFormsSent").show();
                            
                             $("#opportunity-modal #divDetailOppLineItems").hide(); 
                             $("#opportunity-modal #divOpportunityLineItems").hide();
                        
                        }else if(opportunityType == "Synergy Video"){
                        
                            $("#divTotalNumOfTowers").show();
                            $("#divPotentialRevenuePerTower").show();
                            $("#divTotalAnnualPotential").show();
                            $("#divCurrentFYRevenue").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").show();
                            $("#tab-opportunityDetail div#divQuoteId").show();
                            $("#tab-opportunityDetail div#divQuoteDate").show();
                            
                            $("#opportunity-modal div#divTotalNumOfTowers").show();
                            $("#opportunity-modal div#divPotentialRevenuePerTower").show();
                            $("#opportunity-modal div#divTotalAnnualPotential").show();
                            $("#opportunity-modal div#divCurrentFYRevenue").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show(); 
                            $("#opportunity-modal div#divProcedure").hide();
                            $("#opportunity-modal div#divQuoteId").show();
                            $("#opportunity-modal div#divQuoteDate").show();
                        
                        }else if(opportunityType == "Synergy Installation"){
                        
                            $("#divTotalNumOfORs").show();
                            $("#divEquipmentCost").show();
                            $("#divLaborAndMaterials").show();
                            $("#divTotalBudgetary").show();
                            $("#divFinalPOAmount").show();
                            $("#divEstimatedInstallDate").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divQuoteId").show();
                            $("#tab-opportunityDetail div#divQuoteDate").show();
                            
                            
                            $("#opportunity-modal div#divTotalNumOfORs").show();
                            $("#opportunity-modal div#divEquipmentCost").show();
                            $("#opportunity-modal div#divLaborAndMaterials").show();
                            $("#opportunity-modal div#divTotalBudgetary").show();
                            $("#opportunity-modal div#divFinalPOAmount").show();
                            $("#opportunity-modal div#divEstimatedInstallDate").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show();
                            $("#opportunity-modal div#divQuoteId").show();
                            $("#opportunity-modal div#divQuoteDate").show();
                        
                        }else if(opportunityType == "Agreements"){
                            
                            $("#divNoChargeEquipmentValue").show();
                            $("#divDisposablePurchaseValue").show();
                            $("#divContractYears").show();
                            $("#divTotalAnnualPotential").show();
                            $("#divCurrentFYRevenue").show();
                            $("#divQuoteId").show();
                            $("#tab-opportunityDetail div#divQuoteDate").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").show();
                            
                            $("#opportunity-modal div#divNoChargeEquipmentValue").show();
                            $("#opportunity-modal div#divDisposablePurchaseValue").show();
                            $("#opportunity-modal div#divContractYears").show();
                            $("#opportunity-modal div#divTotalAnnualPotential").show();
                            $("#opportunity-modal div#divCurrentFYRevenue").show();
                            $("#opportunity-modal div#divQuoteId").show();
                            $("#opportunity-modal div#divQuoteDate").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show(); 
                            
                        }else if(opportunityType == "Instrument Purchase"){
                             
                            $("#divTotalAnnualPotential").show();
                            $("#divCurrentFYRevenue").show();
                            $("#divQuoteNum").show();
                            $("#divQuoteId").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").show();
                            $("#tab-opportunityDetail div#divQuoteDate").show();
                             
                            $("#opportunity-modal div#divTotalAnnualPotential").show();
                            $("#opportunity-modal div#divCurrentFYRevenue").show();
                            $("#opportunity-modal div#divQuoteNum").show();
                            $("#opportunity-modal div#divQuoteId").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show(); 
                            $("#opportunity-modal div#divQuoteDate").show();
                            
                        }else if(opportunityType == "Stocking Order"){
                            
                            $("#divTotalAnnualPotential").show();
                            $("#divCurrentFYRevenue").show();
                            $("#divQuoteId").show();
                            $("#divQuoteNum").show();
                            $("#divQuoteDate").show();
                            $("#tab-opportunityDetail div#divCompetitiveConversion").show();
                            $("#tab-opportunityDetail div#divCompetitiveCompany").show();
                            
                            $("#opportunity-modal div#divTotalAnnualPotential").show();
                            $("#opportunity-modal div#divCurrentFYRevenue").show();
                            $("#opportunity-modal div#divQuoteNum").show();
                            $("#opportunity-modal div#divQuoteDate").show();
                            $("#opportunity-modal div#divQuoteId").show();
                            $("#opportunity-modal div#divCompetitiveConversion").show(); 
                        } 
                    
                    }
                    
                    function hideOpportunityDetailFields(){ 
                        
                        $("#opportunity-modal div#divAnnualNumberofProcedures").hide();
                        $("#opportunity-modal div#divPotentialRevenuePerCase").hide();
                        $("#opportunity-modal div#divTotalAnnualPotential").hide();
                        $("#opportunity-modal div#divCurrentFYRevenue").hide(); 
                        $("#opportunity-modal div#divCompetitiveCompany").hide();
                        
                        //hide SOS fields 
                        $("#opportunity-modal div#divPatientVolume").hide();
                        $("#opportunity-modal div#divPotentialUserNumber").hide();
                        
                        //hide Synergy Video fields 
                        $("#opportunity-modal div#divTotalNumOfTowers").hide();
                        $("#opportunity-modal div#divPotentialRevenuePerTower").hide();
                        
                        //hide Synergy Installation fields  
                        $("#opportunity-modal div#divTotalNumOfORs").hide();
                        $("#opportunity-modal div#divEquipmentCost").hide();
                        $("#opportunity-modal div#divLaborAndMaterials").hide();
                        $("#opportunity-modal div#divTotalBudgetary").hide();
                        $("#opportunity-modal div#divFinalPOAmount").hide();
                        $("#opportunity-modal div#divEstimatedInstallDate").hide();
                        $("#opportunity-modal div#divProcedure").hide(); 
                         
                        $("#opportunity-modal div#divNoChargeEquipmentValue").hide();
                        $("#opportunity-modal div#divDisposablePurchaseValue").hide();
                        $("#opportunity-modal div#divContractYears").hide(); 
                    
                    }// end of hideOpportunityDetailFields
                    
                    function saveNewOpportunity(){
                
                       $("#newOppErrors").html('');
                       
                       var salesReps = []; 
                       var surgeons = [];
                       var products = []; 
                            
                       $("#opportunity-modal div.sales-reps").children().each(function() {
                           salesReps.push($(this).attr("data-record-id"));
                       });
                       
                       $("#opportunity-modal div.surgeon").children().each(function() {
                           surgeons.push($(this).attr("data-record-id"));
                       });
                       
                       $("#opportunity-modal .product-parts tbody tr").each(function(){
                           products.push({'PricebookEntryId': $(this).attr("data-part-id"),
                                       'Quantity' : $(this).find("p.part-quantity").text(),
                                       'TotalPrice' : $(this).find("td#total").attr("data-total")});
                       });
                       
                       var potentialrev = $("#opportunity-modal input#potentialRevenuePerCase").val();
                         if(potentialrev == null || potentialrev == ''){
                             potentialrev = null;
                         }else{
                             //potentialrev = parseFloat(potentialrev.replace('$','').replace(',',''));
                             potentialrev = potentialrev.replace('$','').replace(/,/g,'');
                         }
                         
                         // SOS fields
                         var patientVol = $("#opportunity-modal input#patientVolume").val();
                         if(patientVol == null || patientVol == ''){
                             patientVol = null;
                         }
                         
                         var potentialUserNumber = $("#opportunity-modal #potentialUserNumber").val();
                         if(potentialUserNumber == null || potentialUserNumber == ''){
                             potentialUserNumber = null;
                         }else{
                             potentialUserNumber = (potentialUserNumber.replace('$','').replace(/,/g,''));
                         }
                         
                         //synergy video fields
                         var totalNumOfTowers = $("#opportunity-modal input#totalNumOfTowers").val();
                         if(totalNumOfTowers == null || totalNumOfTowers == ''){
                             totalNumOfTowers = null;
                         }
                         
                         var potentialRevenuePerTower = $("#opportunity-modal #potentialRevenuePerTower").val();
                         if(potentialRevenuePerTower == null || potentialRevenuePerTower == ''){
                             potentialRevenuePerTower = null;
                         }else{
                             potentialRevenuePerTower = (potentialRevenuePerTower.replace('$','').replace(/,/g,''));
                         }
                         
                         //synergy installation fields
                         var totalNumOfORs = $("#opportunity-modal input#totalNumOfORs").val();
                         if(totalNumOfORs == null || totalNumOfORs == ''){
                             totalNumOfORs = null;
                         }
                         
                         var equipmentCost = $("#opportunity-modal #equipmentCost").val();
                         if(equipmentCost == null || equipmentCost == ''){
                             equipmentCost = null;
                         }else{
                             equipmentCost = (equipmentCost.replace('$','').replace(/,/g,''));
                         }
                         
                         var laborAndMaterials = $("#opportunity-modal #laborAndMaterials").val();
                         if(laborAndMaterials == null || laborAndMaterials == ''){
                             laborAndMaterials = null;
                         }else{
                             laborAndMaterials = (laborAndMaterials.replace('$','').replace(/,/g,''));
                         }
                         var totalBudgetary = $("#opportunity-modal #totalBudgetary").val();
                         if(totalBudgetary == null || totalBudgetary == ''){
                             totalBudgetary = null;
                         }else{
                             totalBudgetary = (totalBudgetary.replace('$','').replace(/,/g,''));
                         }
                         var finalPOAmount = $("#opportunity-modal #finalPOAmount").val();
                         if(finalPOAmount == null || finalPOAmount == ''){
                             finalPOAmount = null;
                         }else{
                             finalPOAmount = (finalPOAmount.replace('$','').replace(/,/g,''));
                         }
                         
                         // Agreements
                         var noChargeEquipmentValue = $("#opportunity-modal #noChargeEquipmentValue").val();
                         if(noChargeEquipmentValue == null || noChargeEquipmentValue == ''){
                             noChargeEquipmentValue = null;
                         }
                         var disposablePurchaseValue = $("#opportunity-modal #disposablePurchaseValue").val();
                         if(disposablePurchaseValue == null || disposablePurchaseValue == ''){
                             disposablePurchaseValue = null;
                         }else{
                             disposablePurchaseValue = (disposablePurchaseValue.replace('$','').replace(/,/g,''));
                         }      
                         
                         var totalAnnualRev = $("#opportunity-modal input#totalAnnualPotential").val();
                         //console.log('##-- totalAnnualRev: '+ totalAnnualRev);
                         if(totalAnnualRev == null || totalAnnualRev == ''){
                             totalAnnualRev = null;
                         }else{
                             //totalAnnualRev = parseFloat(totalAnnualRev.replace('$','').replace(',',''));
                             totalAnnualRev = totalAnnualRev.replace('$','').replace(/,/g,'');
                         }
                         
                         var annualNumberOfProcedures = $("#opportunity-modal #annualNumberOfProcedures").val();
                         if(annualNumberOfProcedures == null || annualNumberOfProcedures == ''){
                             annualNumberOfProcedures = null;
                         }
                         p_productCategory = $("#opportunity-modal select#productCategory").val() == 0 ? null : $("#opportunity-modal select#productCategory").val();
                         console.log('##--saveNewOpportunity.p_productCategory: '+ p_productCategory);
                       
                       var opporutnityType = $("#opportunity-type").val();
                       //var p_productCategory = retrieveDefaultProductCategory(opporutnityType);
                       
                       console.log('##--enrollmentFormsSent: '+$("#opportunity-modal #enrollmentFormsSent").val());
                       console.log('##--estimatedInstallDate: '+$("#opportunity-modal #estimatedInstallDate").val() || null);
                       var objOpportunity = {
                           opportunityId: $("#opportunity-modal input#opportunityId").val(),
                           opportunityOwner: $("#opportunity-modal #opportunity-owner").val(),
                           opportunityName: $("#opportunity-modal #opportunity-name").val(),
                           accountId: $("#opportunity-modal #account").attr("data-record-id"),
                           opportunityCloseDate: $("#opportunity-modal #close-date").val(),
                           competitiveConversion: $("#opportunity-modal #competitive-conversion").val(),
                           competitiveCompany: $("#opportunity-modal #competitive-company").val() == 0 ?null: $("#opportunity-modal #competitive-company").val(),
                           opportunityType: $("#opportunity-modal #opportunity-type").val(),
                           productCategory: p_productCategory,
                           opportunityStage: $("#opportunity-modal #stage").val(),
                           annualNumberOfProcedures: annualNumberOfProcedures,
                           potentialRevenuePerCase: potentialrev,
                           patientVolume: patientVol,
                           potentialUserNumber: potentialUserNumber,
                           totalNumOfTowers: totalNumOfTowers,
                           potentialRevenuePerTower: potentialRevenuePerTower,
                           totalNumOfORs: totalNumOfORs,
                           equipmentCost: equipmentCost,
                           laborAndMaterials: laborAndMaterials,
                           totalBudgetary: totalBudgetary,
                           finalPOAmount: finalPOAmount,
                           estimatedInstallDate: $("#opportunity-modal #estimatedInstallDate").val() || null, //Date.parse(estimatedInstallDate),
                           //quoteNum: $("#opportunity-edit-modal #quoteNum").val(),
                           quoteDate: $("#opportunity-modal #quoteDate").val() || null,
                           noChargeEquipmentValue: noChargeEquipmentValue,
                           disposablePurchaseValue: disposablePurchaseValue,
                           totalAnnualPotential: totalAnnualRev,
                           quoteId: $("#opportunity-modal #quoteId").val(),
                           enrollmentFormType: $("#opportunity-modal #enrollmentFormType").val() == 0 ? null : $("#opportunity-modal #enrollmentFormType").val(),
                           enrollmentFormsSent: $("#opportunity-modal #enrollmentFormsSent").val() || null
                      };
                      
                     Visualforce.remoting.Manager.invokeAction("CS_AROpportunityCC.saveOpportunityN",
                                                               objOpportunity,
                                                               surgeons, // list<string> lstSurgeonIds,
                                                               null, //list<string> lsSalesRep
                                                               null,    //list<string> lsKeyContacts
                                                               null,    //list<string> lsLinkedOpps
                                                               products, //list opportunitylineItems
                                                               
                       function(result, event) {
                               
                         if(event.statusCode == 200){
                            
                            console.log('##--result: '+ JSON.stringify(result));
                            window.location = "/AROpportunityDetail?id=" + result.opportunityId;
                         
                         } else{
                              
                             $("#opportunity-modal button").removeAttr("disabled");
                             $("#newOppErrors").html('Unexpected error. Please try again.');
                             $("#opportunity-modal button.opportunity-save-btn").text("Save");
                         }
                               
                       });  //  end of remote save new Opp call
                       
                       
                       
                   }   //  end of saveNewOpportunity
                    
                    
                    
                    // load in the opportunity Product Category list
                    function populateProductCatergoryValues(opportunityType, prodCategoryToBeSelected){ 
                        var selectList = $("#opportunity-modal select.productCategory");
                        selectList.find("option:gt(0)").remove();
                    
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveOpportunityProductCategoryValues}",
                            opportunityType, function(result, event) { 
                            for ( var i=0; i < result.length; i++) {
                                var txt = globalDecodeEntities(result[i]); 
                                if(prodCategoryToBeSelected && (globalDecodeEntities(prodCategoryToBeSelected) == txt)){
                                    $("#opportunity-modal select.productCategory").append("<option value='"+txt+"' selected='true'>"+txt+"</option>");
                                } else{
                                    $("#opportunity-modal select.productCategory").append("<option value='"+txt+"'>"+txt+"</option>");
                                } 
                            }
                        });
                      
                    }// end of populateProductCatergoryValues
                    
                    $('#opportunity-modal').on('shown.bs.modal', function (e) {
                        $("#notes-date").html(moment().format('M/D/YYYY'));
                    });
                    
                    $("#opportunity-modal button.opportunity-save-btn").on("click", function() {
                        
                        $('#opportunity-modal #newOppErrors').html('');
                        console.log('##--saving oppty');
                        if(isNewOpportunityInputsValid()){
                            $(this).text("Saving...");
                            $("#opportunity-modal button").attr("disabled","true");
                            saveNewOpportunity();
                        } else if (!isOpportunityAccountAndSurgeonValid()){ 
                            $("#opportunity-modal #newOppErrors").html('Valid Account and/or Surgeon required');
                            
                            if($("#opportunity-modal #account").val() 
                                && ! $("#opportunity-modal #account").attr("data-record-id")) {
                                $("#opportunity-modal #account").val("");
                            }
                            if($("#opportunity-modal #surgeon").val()
                                && $("div.surgeon.ctag-list").children().length == 0 ){
                                $("#opportunity-modal #surgeon").val("");
                            }
                     
                        }else{
                            $("#opportunity-modal #newOppErrors").html('All fields are required.');
                        }
                        
                    }); //  end of opp type modal.save click 
                     
                     
                    $('#opportunity-modal').on('hidden.bs.modal', function (e) {
                        //show opportunity-team drop down and hide accountteam 
                        $("#opportunity-modal div#divOpportunityTeam").show();
                        $("#opportunity-modal div#divAccountTeam").hide(); 
                        
                        $('#opportunity-modal select.opportunity-type').attr("readonly", false); 
                        
                        $('#opportunity-modal input.clear-on-close').val('');
                        $('#opportunity-modal select.clear-on-close').val('');
                        $('#opportunity-modal div.clear-on-close').empty();
                        $('#opportunity-modal #newOppErrors').html('');
                        
                        if($("#opportunity-modal .opportunity-owner option[value='"+currentUserId+"']").length > 0){
                            $('#opportunity-modal .opportunity-owner').val(currentUserId);
                        } else{
                            $('#opportunity-modal .opportunity-owner').val("");
                        }
                        hideOpportunityDetailFields();
                        
                        $("#treeOpportunityTeam" ).empty();
                    }); 
                    
                    $(".btn").mouseup(function(){
                        $(this).blur();
                    })

                    $('#opportunity-modal').on('show.bs.modal', function (e) {
                        
                        //setupCreateOppModal();
                        $("#divCompetitiveCompany").hide();
                        $("#newOppErrors").html('');
                        $("#opportunity-modal div.close-date-container").datetimepicker({ 
                                format: 'MM/DD/YYYY',
                                stepping:30,
                                useCurrent: true,
                                showClose: true,
                                ignoreReadonly: true,
                                allowInputToggle: true
                            });
                        console.log('##--Opp Id on show modal: '+ $("#opportunity-modal input#opportunityId").val());
                        if($("#opportunity-modal input#opportunityId").val() == '') { 
                        
                            //defaulting date on Oppty creation to today + 90
                            var output = moment().add(90, 'days').calendar();
                            $("#opportunity-modal .close-date").val(output);
                            
                            //defaulting competitive conversion to "No"
                            $("#opportunity-modal select.competitive-conversion").val("No");
                        
                        } 
                        
                    }); //  end of opportunity-modal.show
                    
                    function createNewOpportunity(){ 
                        setupCreateOppModal();
                        $("#opportunity-modal span.modal-title-txt").text("New Opportunity");
                        $('#opportunity-modal select.opportunity-type').removeAttr('disabled');
                        $("#opportunity-modal #teamOpportunityButton .text").text('');
                        $("#opportunity-modal").modal('show');
                    }
                    
                    function isOpportunityAccountAndSurgeonValid(){
                        if( ($("#opportunity-modal #account").val() &&
                             ! $("#opportunity-modal #account").attr("data-record-id")) 
                             || 
                             ($("#opportunity-modal #surgeon").val()
                                && $("div.surgeon.ctag-list").children().length == 0 ) ){
                    
                            return false;
                         }
                         
                         return true;
                    }
                    
                     function isCaseAccountAndSurgeonValid(){
                        if( ($("#case-prop-modal input.provider").val() &&
                             ! $("#case-prop-modal input.provider").attr("data-record-id")) 
                             || 
                             ($("#case-prop-modal input.practitioner").val()
                                && ! $("#case-prop-modal input.practitioner").attr("data-record-id") )
                             || 
                             ($("#case-prop-modal input.provider").val() == ''
                                && $("#case-prop-modal input.provider").attr("data-record-id") )
                             || 
                             ($("#case-prop-modal input.practitioner").val() == ''
                                && $("#case-prop-modal input.practitioner").attr("data-record-id") ) ){
                    
                            return false;
                         }
                         
                         return true;
                    }
                    function setupCreateOppModal(){
                    
                        //console.log('##--setupCreateOppModal');
                        populateOppOwner('');
                        populateSurgeonTypeaheadOnOpportunity('', false);
                        populateProviderTypeaheadOnOpportunity('', false); 
                        //populateTeams();loadTerritoryTreeForTeam method is being used instead of this.
                        populateOpportunityStageNames('Product Conversion', 'Qualified');
                        populateOppotunityType('none');
                        removeOpportunityProductCategories('Product Conversion', 'none');
                        assignOppPartsTypeahead();
                        assignOppPartDescriptionTypeahead();
                        populateEnrollmentFormType('none');
                        $("#spanDivider").text('Please select opportunity type to see details');
                        loadTerritoryTreeForTeam("treeOpportunityTeam", "opportunity-modal");
                        
                    }   //  end of setupCreateOppModal 
                    
                    
                    /*
                    Added by srinivas sattoor on 06.15.2017, 
                    * Release 4.2, Component: CID-000287
                    * Below function will populate team options on
                    * opp creation and will default to logged in users team
                    */
                    function populateTeams(){
                       
                      Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveUserTeams}",
                      function(result, event) {
                          console.log('##--populateTeams.result: '+ JSON.stringify(result));
                          $('.opportunity-team').empty();
                          $('.opportunity-team')
                                   .append($("<option></option>")
                                              .attr("value","")
                                              .text(""));
                          
                          $.each(result, function(key, value) {
                           console.log('##--populateTeams.value: '+value);
                           console.log('##--populateTeams.value.Id: '+value.Id);
                           console.log('##--populateTeams.value.Name: '+value.Name);
                               $('.opportunity-team')
                                   .append($("<option></option>")
                                              .attr("value",value.Id)
                                              .text(globalDecodeEntities(value.Name))); 
                          });
                          console.log('##--no of teams: '+ result.length);
                          if(result.length === 1){ 
                            $("#opportunity-modal select.opportunity-team").val(result[0].Id);
                          } 
                      
                      }); //  end of remote call
                  }   //  end of populateTeams
                  
                  
                  /*
                   Added by srinivas sattoor on 06.26.2017. Moved the function from detail/DB and list view
                  */
                  function populateOppOwner(existingTerritoryId){
                      
                      var ownerId = $("input#oppOwnerId").val() || currentUserId;
                      var selectedTeam = ''; 
                      selectedTeam = $("#divOpportunityTeamFacet div#treeOpportunityTeam input[name='rdTeamTree']:checked").val() || '';
                      if(existingTerritoryId){
                        selectedTeam = existingTerritoryId;
                      }
                  
                      Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveUsersInMyTeamTerritory}",
                      selectedTeam,
                      function(result, event) {
                          
                          $('.opportunity-owner').empty();
                          $('.opportunity-owner')
                                   .append($("<option></option>")
                                              .attr("value","")
                                              .text(""));
                          
                          $.each(result, function(key, value) {
                               $('.opportunity-owner')
                                   .append($("<option></option>")
                                              .attr("value",value.Id)
                                              .text(globalDecodeEntities(value.Name))); 
                          });
                      
                          if($(".opportunity-owner option[value='"+ownerId+"']").length > 0){
                              $('.opportunity-owner').val(ownerId);
                          } else{
                              $('.opportunity-owner').val("");
                          }
                      
                      }); //  end of remote call
                  }   //  end of populateOppOwner 
                    
                   // load in the opportunity type list
                   function populateOppotunityType(selectedOpportunityType){
                        var selectList = $("#opportunity-modal select.opportunity-type");
                        selectList.find("option:gt(0)").remove();
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveOpportunityTypeValues}",
                        function(result, event) { 
                          for ( var i=0; i < result.length; i++) {
                              var txt = globalDecodeEntities(result[i]);
                              if(txt && selectedOpportunityType == txt){
                                $("#opportunity-modal select.opportunity-type").append("<option value='"+txt+"' selected='true'>"+txt+"</option>");
                              }else{
                                $("#opportunity-modal select.opportunity-type").append("<option value='"+txt+"'>"+txt+"</option>");
                              } 
                          }
                      });
                      
                    }
                    
                    function populateEnrollmentFormType(selectedEnrollmentFormType){
                        var selectList = $("#opportunity-modal select.enrollmentFormType");
                        selectList.find("option:gt(0)").remove();
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveEnrollmentFormTypeValues}",
                        function(result, event) { 
                          for ( var i=0; i < result.length; i++) {
                              var txt = globalDecodeEntities(result[i]); 
                              if(txt && selectedEnrollmentFormType == txt){
                                $("#opportunity-modal select.enrollmentFormType").append("<option value='"+txt+"' selected='true'>"+txt+"</option>");
                              }else{
                                $("#opportunity-modal select.enrollmentFormType").append("<option value='"+txt+"'>"+txt+"</option>");
                              } 
                          }
                      });
                      
                    }
                    
                    //remove the select options first and then repopulate the options
                    // based on opportunity type.
                    function removeOpportunityProductCategories(opportunityType, prodCategoryToBeSelected){
                        
                        var selectList = $("#opportunity-modal select.productCategory");
                        selectList.find("option:gt(0)").remove();
                        
                        populateProductCatergoryValues(opportunityType, prodCategoryToBeSelected);
                    }
                
                     // load in the opportunity stage list
                   function populateOpportunityStageNames(opportunityType, opportunityStage){ 
                    
                      var selectList = $("#opportunity-modal select.stage");
                      selectList.find("option:gt(0)").remove();
                      Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveOpportunityStageValues}",
                        opportunityType, function(result, event) { 
                          for ( var i=0; i < result.length; i++) {
                              var txt = globalDecodeEntities(result[i]); 
                              if(txt && globalDecodeEntities(opportunityStage) == txt){
                                  $("#opportunity-modal select.stage").append("<option value='"+txt+"' selected='true'>"+txt+"</option>");
                              } else{
                                $("#opportunity-modal select.stage").append("<option value='"+txt+"'>"+txt+"</option>");
                              }
                          }
                      });
                      
                    }// end of populateOpportunityStageNames
                    
                    function populateSurgeonTypeaheadOnOpportunity(existingAccountTerritoryId, resetSelection){
                        
                        $("#opportunity-modal i.surgeon-busy").show();
                        selectedOwner = $("#opportunity-modal #opportunity-owner").val();
                        //selecetedTeam = $("#opportunity-modal #opportunity-team").val();
                        var selectedTeam = '';
                        selectedTeam = $("#divOpportunityTeamFacet div#treeOpportunityTeam input[name='rdTeamTree']:checked").val() || ''; 
                        if(existingAccountTerritoryId){
                            selectedTeam = existingAccountTerritoryId; 
                        }
                        
                        if(resetSelection){
                            $("#opportunity-modal .surgeon-typeahead").val(""); 
                            $("#opportunity-modal div.surgeon.ctag-list").empty();
                        }
                        
                        console.log('##--populateSurgeonTypeaheadOnOpportunity.existingAccountTerritoryId: '+ existingAccountTerritoryId);
                        
                        $("#opportunity-modal input.surgeon-typeahead").typeahead("destroy");
                        Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrievePractitionersByOwner",
                        selectedOwner,
                        selectedTeam,
                        function(result, event) {
                            
                            // setup the surgeon type ahead options
                            var surgeonTypeAheadOptions = {
                                minLength: 0,
                                items: 50,
                                source: result,
                                showHintOnFocus: false,                    
                                displayText: function(item) {
                                    return globalDecodeEntities(item.objAccount.Name);
                                },
                                afterSelect: function(item) {
                                    
                                    var practId = item.Id;
                                    
                                    if ( $("#opportunity-modal span[data-record-id="+item.objAccount.Id+"].ctag").length === 0) {
                                        // no duplicates and can't add yourself
                                        $("#opportunity-modal div.ctag-list.surgeon").append(obj2ctag(item.objAccount));
                                    }
                                    $("#opportunity-modal .surgeon-typeahead").val("");  
                                }            
        
                            };
        
                            // init the type ahead
                            $("#opportunity-modal input.surgeon-typeahead").typeahead(surgeonTypeAheadOptions); 
                            
                            var surgeonTypeAheadOptions = {
                                minLength: 0,
                                items: 50,
                                source: result,
                                showHintOnFocus: false,                    
                                displayText: function(item) {
                                    return globalDecodeEntities(item.objAccount.Name);
                                },
                                afterSelect: function(item) {
                                    
                                    var practId = item.objAccount.Id;
        
                                    if ( $("#opportunity-surgeon-add-modal span[data-record-id="+item.Id+"].ctag").length === 0) {
                                        // no duplicates and can't add yourself
                                        $("#opportunity-surgeon-add-modal div.ctag-list.surgeon").append(obj2ctag(item.objAccount));
                                    }
                                    $("#opportunity-surgeon-add-modal .surgeon-typeahead").val("");
                                    
                                }            
        
                            };
        
                            // init the type ahead
                            $("#opportunity-surgeon-add-modal input.surgeon-typeahead").typeahead(surgeonTypeAheadOptions);
                        
                            $("#opportunity-modal i.surgeon-busy").hide();
                        }); //  end of remote call for Surgeon
                    }   //  end of populateSurgeonTypeaheadOnOpportunity 
                     
                    function populateAccountAndSurgeonTypeaheadOnEdit(existingAccountId, obj){ 
                        Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrieveAccountTeamTerritory", existingAccountId,
                            function(result, event) {   
                            
                                if(obj == 'Opportunity'){
                                    populateProviderTypeaheadOnOpportunity(result.Territory2Id, false);
                                    populateSurgeonTypeaheadOnOpportunity(result.Territory2Id, false);
                                }else{
                                    populateProvidersTypeaheadOnCases(result.Territory2Id, false);
                                    populatePractitionersTypeaheadOnCases(result.Territory2Id, false);
                                }
                            }); 
                    }// end of populateAccountAndSurgeonTypeaheadOnEdit 
                    
                    function populateProviderTypeaheadOnOpportunity(existingAccountTerritoryId, resetInputs){
                        console.log('##--populateProviderTypeaheadOnOpportunity.existingAccountTerritoryId: '+ existingAccountTerritoryId);
                        console.log('##--populateProviderTypeaheadOnOpportunity.resetInputs: '+ resetInputs);
                        var providerSelectedOwner = '';
                        var ProviderSelectedTeam = '';
                        $("#opportunity-modal i.account-busy").show();
                        providerSelectedOwner = $("#opportunity-modal #opportunity-owner").val(); 
                        //selecetedTeam = $("#opportunity-modal #opportunity-team").val();  
                      
                        ProviderSelectedTeam = $("#divOpportunityTeamFacet div#treeOpportunityTeam input[name='rdTeamTree']:checked").val() || ''; 
                        console.log('##--populateProviderTypeaheadOnOpportunity.ProviderSelectedTeam from selection: '+ ProviderSelectedTeam);
                        //console.log('##--populateAccountTeam.existingAccountId: '+existingAccountTerritoryId);
                        if(existingAccountTerritoryId){
                            console.log('existingAccountTerritoryId is valid'); 
                            if(resetInputs){//If the account is first selected on creation of opportunity, donot reset the selected values
                                console.log('resetInputs is true'); 
                                providerSelectedOwner = '';
                                ProviderSelectedTeam = existingAccountTerritoryId;
                            }
                        }  
                        
                        if(resetInputs){
                            $("#opportunity-modal .account-typeahead").val(""); 
                            $("#opportunity-modal input.account-typeahead").attr("data-record-id", "");
                            
                            $("#opportunity-modal #account-team").html("");
                            //ProviderSelectedTeam = '';
                        }
                        //console.log('##--populateProviderTypeaheadOnOpportunity.selectedOwner: '+ selectedOwner);
                        console.log('##--populateProviderTypeaheadOnOpportunity.ProviderSelectedTeam: '+ ProviderSelectedTeam); 
                        $("#opportunity-modal input.account-typeahead").typeahead("destroy"); 
                        Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrieveProvidersByOwner",
                            providerSelectedOwner,
                            ProviderSelectedTeam,
                            function(result, event) {
                            //console.log('##--populateProviderTypeaheadOnOpportunity.result: '+ JSON.stringify(result));
                            // setup the account type ahead options object
                            var accountTypeAheadOptions = {
                                minLength: 0,
                                items: 50,
                                source: result,
                                showHintOnFocus: false,
                                displayText: function(item) {
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - START
                                    if(item.Preferred_Name__c != undefined && item.Preferred_Name__c != ''){
                                        return globalDecodeEntities(item.Preferred_Name__c);
                                    }else{
                                        return globalDecodeEntities(item.Name);
                                    }
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - END
                                },
                                afterSelect: function(item) {
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - START
                                    if(item.Preferred_Name__c != undefined && item.Preferred_Name__c != ''){
                                        $("#opportunity-modal input.account").val(globalDecodeEntities(item.Preferred_Name__c));
                                    }else{
                                        $("#opportunity-modal input.account").val(globalDecodeEntities(item.Name));
                                    }
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - END
                                    $("#opportunity-modal input.account").attr("data-record-id", item.Id); 
                                    //Release 3.1.3 added by Srinivas Sattoor 4.15.2017
                                    populateAccountTeam(item.Id, 'Opportunity'); 
                                }
                            };
                            // init the provider type ahead
                            $("#opportunity-modal input.account-typeahead").typeahead(accountTypeAheadOptions);     

                            $("#opportunity-modal i.account-busy").hide();
                        });
                    }   //  end of populateProviderTypeaheadOnOpportunity 

                    //Added by srinivas sattoor for 3.2 on 5.27.2017
                    //updated by srinivas sattoor on 6.26.2017 for 4.1  CID-000284
                    function populateProvidersTypeaheadOnCases(existingAccountTerritoryId, resetInputs){ 
                        
                        var selectedOwner = '';
                        var selectedTeam = '';
                        $("#case-prop-modal i.provider-busy").show();
                        selectedOwner = $("#case-prop-modal #case-owner").val() || '';  
                        selectedTeam = $("#divCaseTeamFacet div#treeCaseTeam input[name='rdTeamTree']:checked").val() || '';
                        
                        if(existingAccountTerritoryId){
                            /*if(resetInputs){ 
                                selectedOwner = '';
                                selectedTeam = existingAccountTerritoryId;
                            }*/
                            selectedOwner = '';
                            selectedTeam = existingAccountTerritoryId;
                        } 
                        if(resetInputs){
                            $("#case-prop-modal input.provider").val(""); 
                            $("#case-prop-modal input.provider").attr("data-record-id", "");  
                            $("#case-prop-modal #account-team").html("");
                            //selectedTeam = '';
                        }  
                        console.log('##--populateProvidersTypeaheadOnCases.selectedTeam: '+ selectedTeam);
                        console.log('##--populateProvidersTypeaheadOnCases.resetInputs: '+ resetInputs);
                        $("#case-prop-modal input.case-provider-typeahead").typeahead("destroy");  
                          Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrieveProvidersByOwner",
                          selectedOwner,
                          selectedTeam,
                          function(result, event) { 
                              // setup the account type ahead options object
                              var accountTypeAheadOptions = {
                                  minLength: 0,
                                  items: 50,
                                  source: result,
                                  showHintOnFocus: false,
                                  displayText: function(item) {
                                      //return globalDecodeEntities(item.Preferred_Name__c);
                                        // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - START
                                        if(item.Preferred_Name__c != undefined && item.Preferred_Name__c != ''){
                                            return globalDecodeEntities(item.Preferred_Name__c);
                                        }else{
                                            return globalDecodeEntities(item.Name);
                                        }
                                        // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - END
                                  },
                                  afterSelect: function(item) { 
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - START
                                    if(item.Preferred_Name__c != undefined && item.Preferred_Name__c != ''){
                                        $("#case-prop-modal input.provider").val(globalDecodeEntities(item.Preferred_Name__c));
                                    }else{
                                        $("#case-prop-modal input.provider").val(globalDecodeEntities(item.Name));
                                    }
                                    // Display Account Name if Preferred_Name__c is blank -- Added by Swetha - END
                                    $("#case-prop-modal input.provider").attr("data-record-id", item.Id); 
                                    populateAccountTeam(globalDecodeEntities(item.Id), 'Case');
                                  }
                              };
                            // init the provider type ahead
                            $("#case-prop-modal input.case-provider-typeahead").typeahead(accountTypeAheadOptions);  
    
                              $("#case-prop-modal i.provider-busy").hide();
                          }); 
               
                    }// end of populateProvidersTypeaheadOnCase

                    //Added by srinivas sattoor for 3.2 on 5.27.2017
                    //updated by srinivas sattoor on 6.26.2017 for 4.1  CID-000284
                    function populatePractitionersTypeaheadOnCases(existingAccountTerritoryId, resetSelection){ 
            
                        // resolve practitioners
                        $("#case-prop-modal i.practitioner-busy").show();
                        selectedOwner = $("#case-prop-modal #case-owner").val() || '';  
                        var selectedTeam = '';
                        selectedTeam = $("#divCaseTeamFacet div#treeCaseTeam input[name='rdTeamTree']:checked").val() || '';
                        if(existingAccountTerritoryId){
                            selectedTeam = existingAccountTerritoryId; 
                        }
                        
                        if(resetSelection){ 
                            $("#case-prop-modal input.practitioner").val("");
                            $("#case-prop-modal input.practitioner").attr("data-record-id", "");
                        }
                        //console.log('##--populatePractitionersTypeaheadOnCases.selectedOwner: '+ selectedOwner);
                           
                        $("#case-prop-modal input.case-practitioner-typeahead").typeahead("destroy");  
                        Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrievePractitionersByOwner",
                        selectedOwner,
                        selectedTeam,
                        function(result, event) {
                            //settings.practitionerList = result; 
                            //console.log('##--listPractitionersMethod.result: '+ JSON.stringify(result));
                            // setup the practitioner type ahead options
                            var practTypeAheadOptions = {
                                minLength: 0,
                                items: 50,
                                source: result,//settings.practitionerList,
                                showHintOnFocus: false,                    
                                displayText: function(item) {
                                    return  globalDecodeEntities(item.objAccount.Name);
                                },
                                afterSelect: function(item) { 
                                    var practId = item.objAccount.Id; 
                                    $("#case-prop-modal input.practitioner").val(globalDecodeEntities(item.objAccount.Name));
                                    $("#case-prop-modal input.practitioner").attr("data-record-id", practId);  
                                }   
                            }; 
                            // init the type ahead
                            $("#case-prop-modal input.case-practitioner-typeahead").typeahead(practTypeAheadOptions); 
                            $("#case-prop-modal i.practitioner-busy").hide();
                        });  
                        
                    }// end of populatePractitionersTypeaheadOnCases
                  
                    function isNewOpportunityInputsValid(){  
                        
                        console.log('##--opp owner: '+ $("#opportunity-modal #opportunity-owner").val());
                        console.log('##--opp name: '+ $("#opportunity-modal #opportunity-name").val());
                        console.log('##--opp account: '+ $("#opportunity-modal #account").val());
                        console.log('##--opp accountId: '+ $("#opportunity-modal #account").attr("data-record-id"));
                        console.log('##--opp surgeons: '+ $("div.surgeon.ctag-list").children().length );
                        console.log('##--opp comp conversion: '+ $("#opportunity-modal #competitive-conversion"));
                        console.log('##--opp type: '+ $("#opportunity-modal #opportunity-type").val() ); 
                        console.log('##--opp closedate: '+ $("#opportunity-modal #close-date").val() );
                 
                         if(! $("#opportunity-modal #opportunity-owner").val() || 
                             ! $("#opportunity-modal #opportunity-name").val() ||
                             ! $("#opportunity-modal #account").val() ||
                             ! $("#opportunity-modal #account").attr("data-record-id") ||
                             ! $("#opportunity-modal #close-date").val() || 
                             $("div.surgeon.ctag-list").children().length == 0 ||
                             ! $("#opportunity-modal #competitive-conversion").val() ||
                             ! $("#opportunity-modal #opportunity-type").val()  ||
                             $("#opportunity-modal #opportunity-type").val() == 0 ||
                             $("#opportunity-modal #productCategory").val() == 0
                             ){
                             
                             return false;
                         }
                         
                         return true;
                     }   //  end of isNewOpportunityInputsValid
                     
                     function retrieveDefaultProductCategory(opportunityType){
                    
                        if(opportunityType == 'SOS'){
                            
                            return 'Other';
                        }else if(opportunityType == 'Synergy Video' ||
                                    opportunityType == 'Synergy Installation'){
                            
                            return 'Synergy';
                            
                        }else {
                            return null;
                        }
                    
                    }// end of retrieveDefaultProductCategory
                    
                    function setCloseLostReasons(val){
                       if(val == "Closed - Lost"){
                           $("#opportunity-modal div#divClosedLostReason").show();
                           $("#opportunity-modal div#divOppEditClosedLostReason").show();
                           
                       } else {
                           $("#opportunity-modal div#divClosedLostReason").hide();
                           $("#opportunity-modal div#divOppEditClosedLostReason").hide();
                       }
                   }   //  end of setCloseLostReasons 
                   
                   function removeCloseLostReasonsOnEditModal(opportunityType, closedLostReasonToBeSelected){
                    
                        var selectList = $("#opportunity-modal select.closed-lost-reason");
                        selectList.find("option:gt(0)").remove();
                        
                        populateCloseLostReasonsOnEditModal(opportunityType, closedLostReasonToBeSelected);
                    }
                    
                    // load in the opportunity Product Category list
                    function populateCloseLostReasonsOnEditModal(opportunityType, closedLostReasonToBeSelected){
                      //console.log('##--opportunityType: '+ opportunityType+'\t##--closedLostReasonToBeSelected: ' + closedLostReasonToBeSelected);
                      var selectList = $("#opportunity-modal select#closed-lost-reason");
                        selectList.find("option:gt(0)").remove();
                        
                      if(opportunityType == ''){
                        opportunityType = $("#opportunity-modal #opportunity-type").val();
                      }
                      Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveOpportunityCloseLostReasons}",
                         opportunityType, function(result, event) { 
                          for ( var i=0; i < result.length; i++) {
                              var txt = globalDecodeEntities(result[i]);
                              console.log('##--closedLostReasonToBeSelected.txt: '+ txt);
                              if(closedLostReasonToBeSelected && (globalDecodeEntities(closedLostReasonToBeSelected) == txt)){
                                  $("#opportunity-modal select#closed-lost-reason").append("<option value='"+txt+"' selected='true'>"+txt+"</option>");
                              } else{
                                  $("#opportunity-modal select#closed-lost-reason").append("<option value='"+txt+"'>"+txt+"</option>");
                              }
                          }
                      });
                      
                    }
               
                     //hide competitive conversion if it sos or synergy installation
                    function setCompetitiveConversion(val){
                        
                        $("#divCompetitiveCompany").hide();
                        $("div#divCompetitiveCompany").hide();
                        $("#opportunity-modal select.competitive-conversion").val("No");
                        if(val == "SOS" || val == "Synergy Installation"){
                            $("#opportunity-modal div#divCompetitiveConversion").hide();
                        } else {
                            $("#opportunity-modal div#divCompetitiveConversion").show();
                        }
                    
                    }// end of setCompetitiveConversion 
                    
                    function assignOppPartsTypeahead(){
                        $("#opportunity-modal input.opportunity-part-number-typeahead").typeahead({
                            // typeahead setup for case products
                            minLength: 3,
                            items: 50,
                            source: function(query, onSuccess) {
                                search(query, "CS_ARCCExtension.searchPriceBookEntries", onSuccess);                                    
                            },
                            displayText: function(item) {
                                return globalDecodeEntities( item.Product2.Material_Number__c + " ; " + item.Product2.Name);
                            },
                            afterSelect: function(item) {
                            
                                $("#opportunity-modal .opportunity-part-number-typeahead").val(item.Product2.Material_Number__c);
                                $("#opportunity-modal .opportunity-part-number-typeahead").attr("data-part-id", item.Id);
                                
                                $("#opportunity-modal .opportunity-part-description").val(item.Product2.Description);
                                $("#opportunity-modal .opportunity-part-quantity").val("1");
                                $("#opportunity-modal .opportunity-part-unit-price").val("$" + item.UnitPrice.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                                $("#opportunity-modal .opportunity-part-unit-price").attr("data-unit-price", item.UnitPrice);
                                
                                $("#opportunity-modal .opportunity-part-total-price").text("$" + item.UnitPrice.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                                $("#opportunity-modal .opportunity-part-total-price").attr("data-total-price", item.UnitPrice);
                                
                                $("#opportunity-modal button.add-opp-part").removeAttr('disabled');
                                //alert(item + " selected and need to add a row in table");
                
                            }
                        });
                    }   //  end of assignOppPartsTypeahead
                    
                    function assignOppPartDescriptionTypeahead(){
                        $("#opportunity-modal input.opportunity-part-description-typeahead").typeahead({
                            // typeahead setup for case products
                            minLength: 3,
                            items: 50,
                            source: function(query, onSuccess) {
                                search(query, "CS_ARCCExtension.searchPriceBookEntries", onSuccess);                                    
                            },
                            displayText: function(item) {
                                return globalDecodeEntities( item.Product2.Material_Number__c + " ; " + item.Product2.Name);
                            },
                            afterSelect: function(item) {
                            
                                $("#opportunity-modal .opportunity-part-number-typeahead").val(item.Product2.Material_Number__c);
                                $("#opportunity-modal .opportunity-part-number-typeahead").attr("data-part-id", item.Id);
                                
                                $("#opportunity-modal .opportunity-part-description").val(item.Product2.Description);
                                $("#opportunity-modal .opportunity-part-quantity").val("1");
                                $("#opportunity-modal .opportunity-part-unit-price").text("$" + item.UnitPrice.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                                $("#opportunity-modal .opportunity-part-unit-price").attr("data-unit-price", item.UnitPrice);
                                
                                $("#opportunity-modal .opportunity-part-total-price").text("$" + item.UnitPrice.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                                $("#opportunity-modal .opportunity-part-total-price").attr("data-total-price", item.UnitPrice);
                                
                                $("#opportunity-modal button.add-opp-part").removeAttr('disabled');
                                //alert(item + " selected and need to add a row in table");
                
                            }
                        });
                    }   //  end of assignOppPartDescriptionTypeahead
                    
                    function addPart(){
                        
                        if($("#opportunity-modal button.add-opp-part").is(":disabled")){
                            return false;
                        }
                        
                        var eleFound=false;
                        $.each($("#opportunity-modal .product-parts tbody tr"), function(i, v){
                            if($(v).attr("data-part-id") == $("#opportunity-modal .opportunity-part-number-typeahead").attr("data-part-id")){
                                eleFound=true;
                            }
                        });
                        
                        if(eleFound){
                            alert("Part already selected. Delete and add the part");
                        } else {
                            var price =parseFloat($("#opportunity-modal .opportunity-part-unit-price").val().replace('$', "").replace(',', ""));
                            //$("#opportunity-modal .product-parts tbody").append('<tr data-part-id="'+$("#opportunity-modal .opportunity-part-number-typeahead").attr("data-part-id")+'"><td><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-number-typeahead").val()+'</p></td><td><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-description").val()+'</p></td><td><p class="form-control-static part-quantity">'+$("#opportunity-modal .opportunity-part-quantity").val()+'</p></td><td><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-unit-price").val()+'</p></td><td id="total" data-total="'+$("#opportunity-modal .opportunity-part-total-price").attr("data-total-price")+'"><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-total-price").text()+'</p></td><td class="pull-right"><button class="btn btn-xs btn-primary" onclick="$(this).parent().parent().remove()">delete</button></td>');
                            $("#opportunity-modal .product-parts tbody").append('<tr data-part-id="'+$("#opportunity-modal .opportunity-part-number-typeahead").attr("data-part-id")+'"><td><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-number-typeahead").val()+'</p></td><td><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-description").val()+'</p></td><td><p class="form-control-static part-quantity">'+$("#opportunity-modal .opportunity-part-quantity").val()+'</p></td><td><p class="form-control-static">'+"$" +price.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,')+'</p></td><td id="total" data-total="'+$("#opportunity-modal .opportunity-part-total-price").attr("data-total-price")+'"><p class="form-control-static">'+$("#opportunity-modal .opportunity-part-total-price").text()+'</p></td><td class="pull-right"><button class="btn btn-xs btn-primary" onclick="$(this).parent().parent().remove()">delete</button></td>');
                            
                        
                        }
                        
                        var totalAmount = 0;
                        $("#opportunity-modal .product-parts tbody tr").each(function(){
                            row = $(this);
                            totalAmount += parseFloat($(this).find("td#total").attr("data-total"));
                        });
                        $("#opportunity-modal .product-parts tfoot #totalProductAmount").attr("data-total", totalAmount);
                        $("#opportunity-modal .product-parts tfoot #totalProductAmount").html("$" + totalAmount.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                        
                        $("#opportunity-modal input.potentialRevenuePerCase").val("$"+totalAmount.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                        
                        var opportunityType = $("#opportunity-modal #opportunity-type").val();
                        if(opportunityType == "Instrument Purchase"){
                            console.log('##--totalAmount: '+ totalAmount);
                            $("#opportunity-modal input.totalAnnualPotential").val("$"+totalAmount.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                        
                        }
                        populateTotalAnnualRevenue();
                        $("#opportunity-modal .opportunity-part-number-typeahead").val("");
                        $("#opportunity-modal .opportunity-part-number-typeahead").removeAttr("data-part-id");
                        
                        $("#opportunity-modal .opportunity-part-description").val("");
                        $("#opportunity-modal .opportunity-part-quantity").val("");
                        $("#opportunity-modal .opportunity-part-unit-price").val("");
                        $("#opportunity-modal .opportunity-part-unit-price").removeAttr("data-unit-price");
                        
                        $("#opportunity-modal .opportunity-part-total-price").text("");
                        $("#opportunity-modal .opportunity-part-total-price").removeAttr("data-total-price");
                        
                        $("#opportunity-modal button.add-opp-part").attr('disabled', 'disabled');
                        
                                
                    }   //  end of addPart 
                    
                    function calculatePartsPrice(e){
                        
                        //console.log('##--e: '+ e);
                        if(isNumber(e)){
                            var qty = parseInt($("#opportunity-modal .opportunity-part-quantity").val());
                            //var price = parseFloat($("#opportunity-modal .opportunity-part-unit-price").attr("data-unit-price"));
                            //console.log('##--price2: '+ $("#opportunity-modal .opportunity-part-unit-price").val());
                            var price =parseFloat($("#opportunity-modal .opportunity-part-unit-price").val().replace('$', "").replace(',', ""));
                            //console.log('##--price: '+ price);
                            var total = qty * price;
                            
                            $("#opportunity-modal .opportunity-part-total-price").text("$" + total.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            $("#opportunity-modal .opportunity-part-total-price").attr("data-total-price", total);
                            
                            return true;
                        }
                        return false;
                    }   //  end of calculatePartsPrice
                    
                    function isNumber(evt) {
                        evt = (evt) ? evt : window.event;
                        var charCode = (evt.which) ? evt.which : evt.keyCode;
                        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                            return false;
                        }
                        return true;
                    }   
                    
                    //Date Format Modified to MM-DD-YYYY format in Release 2.2(CID:-000045) by Mimansha Samal
                    function dateFormatter(val){
                        //return moment(val).format('M/D/YYYY');
                        return moment(val).format("MM-DD-YYYY h:mm A");//YYYY-MM-DD, hh:mm:ss);
                    }
                    
                    //Date Format Modified to MM-DD-YYYY format in Release 2.2(CID:-000045) by Mimansha Samal
                    function dateFormatterNoTime(val){
                        //return moment(val).format('M/D/YYYY');
                        return moment(val).format("MM-DD-YYYY");//YYYY-MM-DD, hh:mm:ss);
                    }
                    
                    function OnlyNum(evt) {
                        evt = (evt) ? evt : window.event;
                        var charCode = (evt.which) ? evt.which : evt.keyCode;
                        if (charCode > 31 && (charCode < 48 || charCode > 57)) {
                            return false;
                        }
                        return true;
                    }
                    
                    function populateTotalAnnualRevenue(){
                        
                        var opportunityType = $("#opportunity-modal #opportunity-type").val();
                        console.log('##--populateTotalAnnualRevenue.opportunityType: '+ opportunityType);
                        if(opportunityType == "Product Conversion"){
                        
                            var potentialrev = $("#opportunity-modal input#potentialRevenuePerCase").val();
                            if(potentialrev == null || potentialrev == ''){
                                potentialrev = null;
                            }else{
                                potentialrev = parseFloat(potentialrev.replace('$','').replace(/,/g,''));
                            }
                            var annualNumberOfProcedures = $("#opportunity-modal #annualNumberOfProcedures").val();
                            if(annualNumberOfProcedures == null || annualNumberOfProcedures == ''){
                                annualNumberOfProcedures = null;
                            }
                            
                            if(annualNumberOfProcedures != null
                                &&  potentialrev != null){
                                totalAnnualRev = annualNumberOfProcedures * potentialrev;
                                $("#opportunity-modal input.totalAnnualPotential").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            }
                            
                        }else if(opportunityType == "SOS"){
                        
                            var patientVol = $("#opportunity-modal input#patientVolume").val();
                            if(patientVol == null || patientVol == ''){
                                patientVol = null;
                            }
                            
                            var potentialUserNumber = $("#opportunity-modal #potentialUserNumber").val();
                            if(potentialUserNumber == null || potentialUserNumber == ''){
                                potentialUserNumber = null;
                            }else{
                                potentialUserNumber = parseFloat(potentialUserNumber.replace('$','').replace(/,/g,''));
                            }
                            
                            if(potentialUserNumber != null
                                &&  patientVol != null){
                                totalAnnualRev = potentialUserNumber * patientVol;
                                $("#opportunity-modal input.totalAnnualPotential").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            }
                        
                        }else if(opportunityType == "Synergy Video"){
                        
                            var totalNumOfTowers = $("#opportunity-modal input#totalNumOfTowers").val();
                            if(totalNumOfTowers == null || totalNumOfTowers == ''){
                                totalNumOfTowers = null;
                            }
                            
                            var potentialRevenuePerTower = $("#opportunity-modal #potentialRevenuePerTower").val();
                            if(potentialRevenuePerTower == null || potentialRevenuePerTower == ''){
                                potentialRevenuePerTower = null;
                            }else{
                                potentialRevenuePerTower = parseFloat(potentialRevenuePerTower.replace('$','').replace(/,/g,''));
                            }
                            
                            if(potentialRevenuePerTower != null
                                &&  totalNumOfTowers != null){
                                totalAnnualRev = potentialRevenuePerTower * totalNumOfTowers;
                                $("#opportunity-modal input.totalAnnualPotential").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            }
                        
                        }else if(opportunityType == "Agreements"){
                        
                            var noChargeEquipmentValue = $("#opportunity-modal input#noChargeEquipmentValue").val();
                            if(noChargeEquipmentValue == null || noChargeEquipmentValue == ''){
                                noChargeEquipmentValue = null;
                            }
                            
                            var disposablePurchaseValue = $("#opportunity-modal #disposablePurchaseValue").val();
                            if(disposablePurchaseValue == null || disposablePurchaseValue == ''){
                                disposablePurchaseValue = null;
                            }else{
                                disposablePurchaseValue = parseFloat(disposablePurchaseValue.replace('$','').replace(/,/g,''));
                            }
                            
                            if(noChargeEquipmentValue != null
                                &&  disposablePurchaseValue != null){
                                totalAnnualRev = noChargeEquipmentValue * disposablePurchaseValue;
                                $("#opportunity-modal input.totalAnnualPotential").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            }
                        
                        }else if (opportunityType == "Synergy Installation"){
                        
                            var equipmentCost = $("#opportunity-modal input#equipmentCost").val();
                            if(equipmentCost == null || equipmentCost == ''){
                                equipmentCost = null;
                            }else{
                                equipmentCost = parseFloat(equipmentCost.replace('$','').replace(/,/g,''));
                            }
                            
                            var laborAndMaterials = $("#opportunity-modal #laborAndMaterials").val();
                            if(laborAndMaterials == null || laborAndMaterials == ''){
                                laborAndMaterials = null;
                            }else{
                                laborAndMaterials = parseFloat(laborAndMaterials.replace('$','').replace(/,/g,''));
                            }
                            
                            if(equipmentCost != null
                                &&  laborAndMaterials != null){
                                totalAnnualRev = equipmentCost + laborAndMaterials;
                                $("#opportunity-modal input.totalBudgetary").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                                //$("#opportunity-modal input.totalBudgetary").val("$"+totalAnnualRev.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,'));
                            }
                        
                        }// end of else-if
                        
                    }// end of populateTotalAnnualRevenue
                    
                    //remove the select options first and then repopulate the options
                    // based on opportunity type.
                    function removeOpportunityStageNameOptions(opportunityType, opportunityStage){
                        
                        var selectList = $("#opportunity-modal select.stage");
                        selectList.find("option:gt(0)").remove();
                        
                        populateOpportunityStageNames(opportunityType, opportunityStage);
                    } 
                    
                    //Release 3.1.3 added by Srinivas Sattoor 4.15.2017
                    function populateAccountTeam(accountId, obj){
                        console.log('##--populateAccountTeam.accountId: '+ accountId+ '; obj: '+ obj);
                        Visualforce.remoting.Manager.invokeAction("CS_ARCCExtension.retrieveAccountTeamTerritory", accountId,
                          function(result, event) { 
                            
                            if(obj == 'Opportunity'){
                                $("#opportunity-modal #account-team").html(result.Territory2.Name);
                                //console.log('##--populateAccountTeam.result: '+result.Territory2.Name); 
                                //populate opporutnity-team 
                                $("#opportunity-modal select.opportunity-team").val(result.Territory2.Id);
                                $("#opportunity-modal input[name='rdTeamTree'][value='"+result.Territory2.Id+"']").prop('checked',true);
                                $("#opportunity-modal #teamOpportunityButton .text").text(result.Territory2.Name);
                                
                                // added by srinivas sattoor 4.2 6.26.2017 populating account team on opp detail     
                                $("#oppDetailsView div.oppAccountTeam").html(result.Territory2.Name); 
                                $("#oppDetailsView #hiddenAccountTeamId").val(result.Territory2.Id);
                                
                                populateProviderTypeaheadOnOpportunity(result.Territory2.Id, false);
                                populateSurgeonTypeaheadOnOpportunity(result.Territory2.Id, false);
                                populateOppOwner(result.Territory2.Id);
                            }else if(obj == 'Case'){
                                console.log('##--resetting acount team on ase modal');
                                // added by srinivas sattoor 4.2 6.26.2017 populating account team on case detail
                                $("#caseDetailsView div.team").html(result.Territory2.Name);
                                $("#case-prop-modal input[name='rdTeamTree'][value='"+result.Territory2.Id+"']").prop('checked',true);
                                $("#case-prop-modal #caseTeamButton .text").text(result.Territory2.Name);
                                
                                populateProvidersTypeaheadOnCases(result.Territory2.Id, false);
                                populatePractitionersTypeaheadOnCases(result.Territory2.Id, false);
                                populateOwnerInfo(result.Territory2.Id); 
                            }else if (obj == 'Task'){ 
                                DDTEAMTREE = true;
                                $("#task-modal #taskTeamButton").closest("div.dropdown").find("input[value='"+result.Territory2.Id+"']").click();
                            } 
                            
                            
                          });   //  end of remote call
                     }  //  end of populateAccountTeam 
                    
                    // end of new opp code. 
                    
                    function checkForNewCase(){
      
                        var caseStatus = getSelectedText('form-control status');            
                        var dateElements = document.getElementsByClassName('form-control date start-date clear-on-close');
                        var dateValue = dateElements[0].value; 
                        if(dateValue == '' || dateValue == 'undefined'){
                            return true;
                        }
                        var fullDate = dateValue.split('/');
                        
                        var month = fullDate[0];
                        var day = fullDate[1];
                        
                        var splittime = fullDate[2].split(' ');
                        var year = splittime[0];
                        
                        var hrMin = splittime[1].split(':');
                        var hr = 0;
                        hr = parseInt(hrMin[0]);
                        var min = hrMin[1];

                        if(splittime[2].trim() == 'PM'){
                            hr = hr + 12;
                        }                               
                        var startTime = new Date(year, month - 1, day, hr, min, 0,0);                        
                        var currentDateTime = new Date();
                        
                        var isPastDate = false;
                        var isFutureDate = false;                       
                        
                        if (currentDateTime > startTime) {
                            isPastDate = true;
                        }else{
                            isFutureDate = true;
                        }   
                
                    <!--CID - 000056/Swetha P/Dec/9/2016/Case Calendar status -->
                        console.log('##--clicked cased detail button');
                        console.log('##--isPastDate: '+ isPastDate);
                        console.log('##--isFutureDate: '+ isFutureDate);
                        console.log('##--caseStatus: '+ caseStatus);
                        // Past Date
                        if((caseStatus == 'Pending' || caseStatus == 'Confirmed') && isPastDate){ 
                             console.log('Past case can only be Completed or Cancelled.');
                             $("#case-prop-modal span.save-error").text("Past case can only be Completed or Cancelled.");    
                             return false;
                        }            
                        // Future Date
                        
                        if(caseStatus == 'Completed' && isFutureDate){ 
                            console.log('You can not Complete Future Case.');
                            $("#case-prop-modal span.save-error").text("You can not Complete Future Case."); 
                            return false;
                        }   
                        
                        return true;

                    }// end of checkForNewCase
                    //swethap 
                    function setProductsFor(procedureId, clearPrevious, modalId){ 
                        
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARTemplateCC.retrieveProductsByProcedure}",
                          procedureId, function(result, event) {
                  
                            if(clearPrevious){
                              $("#" + modalId + " div.ctag-list.products").empty();
                            }
                            
                  
                            for ( var i=0; i < result.length; i++) {
                              if ( result[i].Product__c ) {
                                $("#" + modalId + " div.ctag-list.products").append(obj2ctag({
                                  Id: result[i].Product__r.Id, 
                                  Name: globalDecodeEntities(result[i].Product__r.Name)
                                }));
                              }
                            }
                            
                      }); //  end of Remote call
                    } //  end of setProductsFor

                    function getSelectedText(elementId) {
                        var elt = document.getElementsByClassName(elementId);
                                    
                        if (elt[0].selectedIndex == -1)
                            return null;            
                        return elt[0].options[elt[0].selectedIndex].text;
                    }
                    
                     /*
                        Added by srinivas sattoor on 6.20.2017 for 4.1
                        Logic for creating territory tree for team selection on Opportunity creation
                        and case creation
                    */
                    parentIds=[]; createdParentIds=[]; nodesWithNoParents=[]; nodesWithParentNodes=[];
                    function loadTerritoryTreeForTeam(divTreeId, modal){
                        console.log('##--loadTerritoryTreeForTeam: ');
                        parentIds=[]; createdParentIds=[]; nodesWithNoParents=[]; nodesWithParentNodes=[];
                        //$('ul').empty();
                        
                        $("div#treeOpportunityTeam ul").empty();
                        $("div#treeOpportunityTeam ul").remove();
                        $("#treeOpportunityTeam").empty(); 
                            //  Creating the Tree for Agencies 
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveMyterritoryId}",
                        function(userTerritoryId, event) {
                        
                            Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.parentTerritoryAndListTerritories}",
                                function(territories, event) {
                                    //console.log('Territory Map: ' + JSON.stringify(territories)); 
                                    
                                    $.each(territories, function(i, v){ 
                                        if($.inArray(i, parentIds) < 0){
                                            parentIds.push(i);
                                        }
                                        //console.log('i: ' + i);
                                        //console.log('v: ' + JSON.stringify(v));
                                    }); //  end of create ParentIDs 
                                    /*
                                        Since te root node can come anywhere in the list,
                                        we need to take out the root node from the list of parents and put it in the begining
                                        and also remove the Parent of root node so that duplicate roots are not created
                                        
                                    */
                                    var rootIndex = parentIds.indexOf(userTerritoryId);
                                    if(rootIndex > -1){
                                        parentIds.splice(rootIndex, 1);
                                    }
                                    //  Get the parent node of the root
                                    
                                    var parentOfroot;
                                    $.each(parentIds, function(i, val){
                                        if(territories[val].length == 1 && territories[val][0].Id == userTerritoryId){
                                            parentOfroot = val;
                                            return false;
                                        }
                                    });
                                    // remove the parent of root
                                    var parentOfRootIndex = parentIds.indexOf(parentOfroot);
                                    if(parentOfRootIndex > -1){
                                        parentIds.splice(parentOfRootIndex, 1);
                                    }
                                    //console.log('##-- ParentIds before Unshift: ' + parentIds);
                                    //  add both Parent of Root and Root to the begining of parentIds.
                                    //  This will allow us to create the Root node first and the first level childeren second before the others are created
                                    if(territories[userTerritoryId] != null && territories[userTerritoryId].length > 0){
                                        if(userTerritoryId){
                                            parentIds.unshift(userTerritoryId);
                                        } 
                                    }
                                    if(parentOfroot){
                                        parentIds.unshift(parentOfroot);
                                    } 
                                    //console.log('##-- ParentIds after Unshift: ' + parentIds);
                                    
                                    //Clearing the tree first 
                                    $("div#"+ divTreeId).empty();

                                    $.each(parentIds, function(i, pl){    //  pl: parentList
                                        $.each(territories[pl], function(i, v){
                                            //console.log('i: ' + i);
                                            //console.log('v: ' + v);
                                            createTreeNodeForTeam(v, false, modal);
                                        }); //  end of children
                                        
                                    }); //  end of parentList
                                    
                                    //  Check and create nodes which appreared before their parent was created
                                    if(nodesWithNoParents!=null && nodesWithNoParents.length > 0){
                                        $.each(nodesWithNoParents, function(i, v){
                                            createTreeNodeForTeam(v, true, modal);
                                        });
                                    }
                                    
                                     //$('div#treeOpportunityTeam').tree({
                                     $("div#"+divTreeId).tree({
                                        dnd: false,
                                        onCheck: {
                                            ancestors: 'checkIfFull',
                                            descendants: 'check'
                                        },
                                        onUncheck: {
                                            ancestors: 'uncheck',
                                            descendants: 'uncheck'
                                        }
                                    }); 
                                    //console.log('##--parentIds.length: '+ parentIds.length);
                                    if(parentIds.length == 1 && modal != 'task-modal'){
                                        firstKey = Object.keys(territories)[0];
                                        console.log('##--modal: '+ modal +'parentIds[0]: '+ parentIds[0]);
                                        //$("#"+modal+ " input[name='rdTeamTree'][value='"+parentIds[0]+"']").prop('checked',true);
                                        $("#"+modal+ " input[name='rdTeamTree']").prop('checked',true);
                                        console.log('##--territories.get(userTerritoryId)[0].Name: ' + territories[firstKey][0].Name);
                                        $("#"+modal+ " span.text").text(territories[firstKey][0].Name);
                                        if(modal == 'opportunity-modal'){
                                            $("#"+modal+ " #teamOpportunityButton").attr('readonly', 'readonly');
                                            $("#"+modal+ " #teamOpportunityButton").attr("disabled", true); 
                                            $("#"+modal+ " #teamOpportunityButton").addClass('inputDisabled');
                                        } else if(modal == 'case-prop-modal'){
                                            $("#"+modal+ " #caseTeamButton").attr('readonly', 'readonly');
                                            $("#"+modal+ " #caseTeamButton").attr("disabled", true); 
                                            $("#"+modal+ " #caseTeamButton").addClass('inputDisabled'); 
                                        }
                                    } 
                                    
                                    // if no team is selected, then set the top level team
                                    if(modal == 'task-modal'){
                                        var selectedTeamName = $("#task-modal #taskTeamButton span.selectedTeamCSS").text();
                                        
                                        //Added by srinivas sattoor below needs to refactored in a later release
                                        // The team was not getting when adding task from opp detail/case detail/task detail for managers.
                                        var teamId = $("input#hiddenAccountTeamId").val() || '';
                                        var caseteamId = $("#caseDetailsView input#accountTeamId").val() || '';
                                        var taskAccountTeamId = $("input#hiddenTaskAccountTeamId").val() || '';
                                        console.log('##--##--showAddTasks before.teamId: '+ teamId);
                                        console.log('##--##--showAddTasks before.caseteamId: '+ caseteamId);
                                        console.log('##--##--showAddTasks before.taskAccountTeamId: '+ taskAccountTeamId);
                                        console.log('##--##--showAddTasks before.t.title: '+ $('#task-modal .modal-title').text());
                                        console.log('##--create title is visible: '+ $('.modal-title.create').is(':visible'));
                                        console.log('##--create title is visible: '+ $('.modal-title.edit').is(':visible'));
                                        if(caseteamId){
                                            teamId = caseteamId;
                                        }else if(taskAccountTeamId && !$('.modal-title.create').is(':visible')){
                                            teamId = taskAccountTeamId;
                                        }
                                        if ( selectedTeamName.length <= 1  &&  teamId.length <= 1) {
                                            // unselected team name is a splace (" ")
                                            DDTEAMTREE=true;
                                            $("#task-modal #taskTeamButton").closest("div.dropdown").find("input[type=radio]").first().click();
                                            
                                        }  
                                        console.log('##--showAddTasks.teamId: '+ teamId); 
                                        if ( teamId ) {
                                                        
                                            // set the team and trigger change to update the task owner list
                                            DDTEAMTREE=true;
                                            
                                            $("#task-modal #taskTeamButton").closest("div.dropdown").find("input[value='"+teamId+"']").click();
                
                                        } 
                                    }
                                    
                                    //  finished creating the team pull down, annouce it to whoever may be listening
                                    $("#"+divTreeId).trigger("team.tree.created");
                            }); //  end of remote call to get Territories
                        }); //  end of remote call to get the root Territory
                        
                    }   //  end of loadTerritoryTree
                    
                     /*
                        Added by srinivas sattoor on 6.20.2017 for 4.1
                        Logic for creating territory tree for team selection on Opportunity creation
                        and case creation
                    */
                    function createTreeNodeForTeam(v, forceCreate, modal){
                        //console.log('##--creating tree node for modal: '+ modal);
                        htm='';
                        if(inArray(v.Id, parentIds)){
                            // Create a Parent UL
                            htm = '<ul id="'+v.Id+'"><li><input type="radio" name="rdTeamTree" onclick="teamTreeSelected(this.value,\''+
                                    v.Name+'\',\''+modal+'\')" value="'+v.Id +'"';
                            if(modal != 'task-modal'){
                                htm += ' style="display:none"'
                            }
                            htm += '/> <span>'+ v.Name +'</span><ul></ul></li></ul>';
                            
                            if(inArray(v.ParentTerritory2Id,createdParentIds) ){ 
                                $('#'+modal+ ' ul#'+v.ParentTerritory2Id + ' ul:first').append(htm);
                                createdParentIds.push(v.Id);
                            } else {
                                //  This is is when the current node is a Parent and its Parent is not created yet.
                                //  In this case we assume that this Node is Root and create it 
                               if(modal == 'opportunity-modal'){
                                    $('div#treeOpportunityTeam').append(htm);
                                } else if ( modal == 'task-modal') {
                                    $('div#treeTaskTeam').append(htm);                                
                                }else{
                                    $('div#treeCaseTeam').append(htm);
                                }
                                createdParentIds.push(v.Id);
                                
                                //  Initially we were creating a root node from current nodes parent and then attaching to it
                                // Create the grand parent and append this node
                                //gpHtm = '<ul id="'+v.ParentTerritory2.Id+'"><li><input type="radio" name="rdTeamTree" onclick="teamTreeSelected(this.value)" value="'+v.ParentTerritory2.Id+'"/> <span>'+v.ParentTerritory2.Name+'</span></li></ul>';
                                //$('ul#'+v.ParentTerritory2Id + ' li').append(htm);
                                //createdParentIds.push(v.ParentTerritory2Id);
                            }
                            
                            if(inArray(v.ParentTerritory2Id, parentIds)){
                                //  Means the current node's parent is a grand parent
                                 nodesWithParentNodes.push(v.ParentTerritory2Id);
                            }
                        } else{
                            if(inArray(v.ParentTerritory2Id,createdParentIds)){
                                //  create a child node
                                htm = '<li><input type="radio" name="rdTeamTree" onclick="teamTreeSelected(this.value,\''+v.Name+'\',\''+modal+'\')" value="'+v.Id+'"/> <span>'+v.Name+'</span></li>';
                                
                                if(inArray(v.ParentTerritory2Id, parentIds)){
                                    // current node's parent has other children that are parents so need to render this node as a parent even though its not
                                    //  for having a consistent alignment
                                    
                                    htm = '<ul id="'+v.Id+'"><li><input type="radio" name="rdTeamTree" onclick="teamTreeSelected(this.value,\''+v.Name+'\',\''+modal+'\')" value="'+v.Id+'"/> <span>'+v.Name+'</span></li></ul>';
                                } 
                                $('#'+modal+ ' ul#'+v.ParentTerritory2Id + ' ul:first').append(htm);
                            } else if(forceCreate){
                                htm = '<ul id="'+v.ParentTerritory2Id+'"><li><input type="radio" name="rdTeamTree" onclick="teamTreeSelected(this.value,\''+v.Name+'\',\''+modal+'\')" value="'+v.Id+'"/> <span>'+v.Name+'</span><ul></ul></li></ul>';
                                    //  since the parent wasnt created just append to the tree
                                     
                                if(modal == 'opportunity-modal'){
                                    $('div#treeOpportunityTeam').append(htm);
                                } else if ( modal == 'task-modal') {
                                    $('div#treeTaskTeam').append(htm);        
                                }else{
                                    $('div#treeCaseTeam').append(htm);
                                }
                                createdParentIds.push(v.Id);
                            } else {
                                nodesWithNoParents.push(v);
                            }
                        }
                    }   //  end of createTreeNodeForTeam

                    function teamTreeSelected(value, name, modal){
                        if(DDTEAMTREE){
                            
                            console.log('##--Team Selected:' + value);
                            $("div.dropdown").css('display', 'inline-block');
                            $(".dropdown-content").css('display', 'none');
                            $("#teamOpportunityButton").removeClass("active");
                            DDTEAMTREE = false;
                            if(modal == 'opportunity-modal'){
                                $("#opportunity-modal #teamOpportunityButton .text").text(name);
                                populateSurgeonTypeaheadOnOpportunity(value, true);
                                populateProviderTypeaheadOnOpportunity(value, true);
                                populateOppOwner(value); 
                            }else if ( modal == 'task-modal' ) {

                                $("#task-modal #taskTeamButton .text").text(name);

                                // trigger a custom event to anyone listening
                                $("#task-modal #taskTeamButton").trigger("task.team.change", [{
                                    Id: value,
                                    Name: name
                                }]);

                            }else{
                                //refresh typeahead on cases 
                                $("#case-prop-modal #caseTeamButton .text").text(name); 
                                populateProvidersTypeaheadOnCases(value, true);
                                populatePractitionersTypeaheadOnCases(value, true); 
                                populateOwnerInfo(value);
                            }
                        }   //  end of if
                    }   //  end of teamTreeSelected
                    
                    
                    
                    $(document).ready(function() {
                        
                        //Uncommented by Ansu for release 3.2 on 13 Feb
                        var aggridLicenseKey = 'Arthrex_Inc_Site_1Devs17_January_2018__MTUxNjE0NzIwMDAwMA==f78a3bf17fb3daeb78acd7ced888139e';
                        agGrid.LicenseManager.setLicenseKey(aggridLicenseKey);
                        
                        // begin added by chad

                        var checkForOpenTasks = function() {
                            Visualforce.remoting.Manager.invokeAction("CS_ARTemplateCC.retrieveOpenTaskCount",
                                function(result, event) { 
                                
                                    if ( event.status ) {
                                        if ( result > 0 ) {
                                            $(".open-task-count").text(result);
                                            $(".open-task-count").show();
                                        } else {
                                            $(".open-task-count").text("0");
                                            $(".open-task-count").hide();
                                        }
                                        
                                    }
                            
                                });
                        };

                        checkForOpenTasks();

                        // schedule check for current task count every so often
                        window.setInterval( function() {
                            checkForOpenTasks();
                        },5000);

                        
                        $("#task-modal div.dueDate-container").datetimepicker({ 
                            format: 'MM/DD/YYYY',
                            stepping:30,
                            useCurrent: true,
                            showClose: true,
                            ignoreReadonly: true,
                            allowInputToggle: true
                        });

                        // when the task modal is shown
                        $("#task-modal").on("shown.bs.modal", function(e) {

                            // show parent radios
                            //$("#treeTaskTeam input[type=radio]").show();
                            
                            // create the team tree for the task modal
                            loadTerritoryTreeForTeam("treeTaskTeam", "task-modal");
                            
                            // if no team is selected, then set the top level team
                           /* var selectedTeamName = $("#task-modal #taskTeamButton span.selectedTeamCSS").text();
                            if ( selectedTeamName.length <= 1 ) {
                                // unselected team name is a splace (" ")
                                DDTEAMTREE=true;
                                $("#task-modal #taskTeamButton").closest("div.dropdown").find("input[type=radio]").first().click();
                                
                            } */

                            // subject default focus
                            $("#task-modal input.other-subject").focus();
                            
                            
                        });
                        

                        



                        // pull in picklists needed for creating a task, this is done with the metadata API
                        // so the layout settings applies, we're interested in Record Type 'Axis Activity'
                        sforce.connection.sessionId = '{!$Api.Session_ID}';
                        sforce.connection.describeLayout("Task",[], function(result) { 

                            var axisActivity = $.grep(result.recordTypeMappings, function(recordType) {
                                return recordType.name == "Axis Activity";
                            })[0];

                            $.each(axisActivity.picklistsForRecordType, function(idx, picklist) {


                                if ( picklist.picklistName === "Subject" ) {
                                    // subject picklist

                                    // picklist values may be an object or an array
                                    if ( Array.isArray(picklist.picklistValues) ) {
                                        
                                        $.each(picklist.picklistValues, function(idx, option) {

                                            if ( option.active == "true" && option.defaultValue == "true") {
                                                $("#task-modal select.subject").append("<option value='"+option.value+"'>"+option.label+"</option>");
                                            } else if ( option.active == "true") {
                                                $("#task-modal select.subject").append("<option value='"+option.value+"' selected='true'>"+option.label+"</option>");
                                            }
                                        
                                        });
                                    
                                    } else {

                                        var option = picklist.picklistValues;
                                        $("#task-modal select.subject").append("<option value='"+option.value+"' selected='true'>"+option.label+"</option>");

                                    }

                                    // add the free text option
                                    $("#task-modal select.subject").append("<option value='free-form'>Free form</option>");

                                } else if ( picklist.picklistName === "Status" || picklist.picklistName === "Priority") {

                                    var btns = "";
                                    var name = picklist.picklistName.toLowerCase();

                                    // picklist values may be an object or an array
                                    if ( Array.isArray(picklist.picklistValues) ) {
                                        
                                        var pickListItems = [];
                                        $.each(picklist.picklistValues, function(idx, item) {

                                            // handles status
                                            if ( item.active == "true" && item.value == "New" ) { pickListItems[0] = item; }
                                            if ( item.active == "true" && item.value == "In Progress" ) { pickListItems[1] = item; }
                                            if ( item.active == "true" && item.value == "Completed" ) { pickListItems[2] = item; }

                                            // handles priority
                                            if ( item.active == "true" && item.value == "Normal" ) { pickListItems[0] = item; }
                                            if ( item.active == "true" && item.value == "High" ) { pickListItems[1] = item; }
                                        });
                                        

                                        $.each(pickListItems, function(idx, btn) {

                                            // don't include "cancelled"
                                            if ( btn.value != "Cancelled") {
                                                if ( btn.active == "true" && btn.defaultValue == "true") {
                                                    btns += "<button class='btn btn-primary "+name+"' data-value='"+btn.value+"' type='button'>"+btn.label+"</button>";
                                                
                                                } else if ( btn.active == "true" ) {
                                                   btns += "<button class='btn btn-default "+name+"' data-value='"+btn.value+"' type='button'>"+btn.label+"</button>";
                                                }
                                            }
                                            
                                        });


                                    } else {
                                        
                                        var btn = picklist.picklistValues;
                                        btns += "<button class='btn btn-primary "+name+"' data-value='"+btn.value+"' type='button'>"+btn.label+"</button>";
                                        
                                    }
                                    

                                    $("#task-modal .btn-group."+name).append(btns);
                                    var btnGroup = $("#task-modal .btn-group."+name);                                                                      

                                }

                            });


                        });

                        // picking task type 
                        $("#task-modal select.task-type").on("change", function(e) {

                            var taskType = $(this).val();
                            var taskTypeLabel = $(this).find("option:selected").text();
                            console.log("TaskType="+taskType+" taskTypeLabel="+taskTypeLabel);
                            
                            $("#task-modal .task-type-label").text( taskTypeLabel );
                            
                            if ( taskType === "general" ) {
                                //$("#task-modal input.task-owner").show();
                                //$("#task-modal select.task-owner").hide();

                                $("#task-modal .account-container").hide();
                                $("#task-modal .surgeon-container").hide();

                                $("#task-modal .task-type-control").add(".account-search, .surgeon-search, .team").attr("disabled","true");
                                $("#task-modal .task-type-control").not(".account-search, .surgeon-search, .team").removeAttr("disabled");
                                $("#task-modal select.subject[value=free-form]").removeAttr("disabled").show();
                                $("#task-modal .association-container").hide();

                            } else if (taskType === "account" ) {

                                $("#task-modal input.task-owner").hide();
                                $("#task-modal select.task-owner").show();                                
                                
                                $("#task-modal .task-type-control").add(".surgeon-search").attr("disabled","true");
                                $("#task-modal .task-type-control").not(".surgeon-search").removeAttr("disabled");
                                $("#task-modal select.subject[value=free-form]").removeAttr("disabled").show();
                                $("#task-modal .association-container").hide();

                            } else if (taskType === "surgeon" ) {

                                $("#task-modal input.task-owner").hide();
                                $("#task-modal select.task-owner").show();  

                                $("#task-modal .task-type-control").add(".account-search").attr("disabled","true");
                                $("#task-modal .task-type-control").not(".account-search").removeAttr("disabled");
                                $("#task-modal select.subject[value=free-form]").removeAttr("disabled").show();
                                $("#task-modal .association-container").hide();

                            } else if ( taskType === "case" ) {

                                $("#task-modal input.task-owner").hide();
                                $("#task-modal select.task-owner").show();  

                                $("#task-modal .associated-object").val("");
                                $("#task-modal .association-label").text(taskTypeLabel);
                                $("#task-modal .task-type-control").removeAttr("disabled");
                                $("#task-modal select.subject[value=free-form]").attr("disabled","true").hide();

                                $("#task-modal .association-container").show();
                                $("#task-modal .association-button").trigger("click");


                            } else if ( taskType === "opportunity" ) {

                                $("#task-modal input.task-owner").hide();
                                $("#task-modal select.task-owner").show();  

                                $("#task-modal .associated-object").val("");
                                $("#task-modal select.subject[value=free-form]").attr("disabled","true").hide();
                                $("#task-modal .association-label").text(taskTypeLabel);
                                $("#task-modal .task-type-control").removeAttr("disabled");

                                $("#task-modal .association-container").show();
                                $("#task-modal .association-button").trigger("click");
                                                    
                            }


                        });

                        // toggling subject picklist to free text
                        $("#task-modal select.subject").on("change", function() {

                            var subject = $(this).val();
                            if ( subject === "free-form" ) {
                                $(this).hide();
                                $("#task-modal .other-subject").show().focus();
                            }
                        
                        });

                        // toggling free text back to subject picklist
                        $("#task-modal button.cancel-other-subject").on("click", function(e) {
                            e.stopPropagation();
                            $("#task-modal .other-subject").hide();
                            $("#task-modal select.subject").val($("#task-modal select.subject option:first").val());
                            $("#task-modal select.subject").show();
                             
                        });


                        // changing status on new task modal ( delegated )
                        $("#task-modal").on("click", "button.status", function(e) {

                            if ( ! $(this).hasClass("btn-primary") ) {
                                $("#task-modal button.status.btn-primary").removeClass("btn-primary").addClass("btn-default");
                                $(this).removeClass("btn-default").addClass("btn-primary").blur();
                            }
                            

                        });

                        // changing priority on new task modal ( delegated )
                        $("#task-modal").on("click", "button.priority", function(e) {

                            if ( ! $(this).hasClass("btn-primary") ) {
                                $("#task-modal button.priority.btn-primary").removeClass("btn-primary").addClass("btn-default");
                                $(this).removeClass("btn-default").addClass("btn-primary").blur();
                            }
                            

                        });

                        // task pager callback
                        $("#task-modal select.pager-size-change").on("change", function(e) {

                            var newPageSize = $(this).val();
                            var grid = taskGridOptions;

                            if ( $(this).hasClass("task-case-grid") ) {
                                 grid = taskCaseGridOptions 
                            } else if ( $(this).hasClass("task-opp-grid") ) {
                                grid = taskOppGridOptions;
                            }

                            if(newPageSize != 'All'){
                                grid.api.paginationSetPageSize(Number(newPageSize));
                            }else{
                                grid.api.paginationSetPageSize(Number(gridOptions.api.getModel().getRowCount()));
                            }

                        });

                        // task pager callbacks
                        $("#task-modal button.pager-control").on("click", function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            
                            if ( $(this).hasClass("first")) {
                                if ( $(this).hasClass("task-case-grid") ) {
                                    taskCaseGridOptions.api.paginationGoToFirstPage();
                                } else if ( $(this).hasClass("task-opp-grid") ) {
                                    taskOppGridOptions.api.paginationGoToFirstPage();
                                }
                                
                            } else if ( $(this).hasClass("last")) {
                                if ( $(this).hasClass("task-case-grid") ) {
                                    taskCaseGridOptions.api.paginationGoToLastPage();
                                } else if ( $(this).hasClass("task-opp-grid") ) {
                                    taskOppGridOptions.api.paginationGoToLastPage();
                                }
                                
                            } else if ( $(this).hasClass("next")) {
                                if ( $(this).hasClass("task-case-grid") ) {
                                    taskCaseGridOptions.api.paginationGoToNextPage();
                                } else if ( $(this).hasClass("task-opp-grid") ) {
                                    taskOppGridOptions.api.paginationGoToNextPage();
                                }
                                
                            } else if ( $(this).hasClass("previous")) {
                                if ( $(this).hasClass("task-case-grid") ) {
                                    taskCaseGridOptions.api.paginationGoToPreviousPage(); 
                                } else if ( $(this).hasClass("task-opp-grid") ) {
                                    taskOppGridOptions.api.paginationGoToPreviousPage(); 
                                }
                               
                            }
                        });

                        // search box for modal opp grid
                        $("#task-modal input.search.task-opp-grid").on("keyup", function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            taskOppGridOptions.api.setQuickFilter( $(this).val() );
                        });

                        // search box for modal case grid
                        $("#task-modal input.search.task-case-grid").on("keyup", function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            taskCaseGridOptions.api.setQuickFilter( $(this).val() );
                        });

                        // changing team triggers a task.team.change custom event passing in the new team
                        $("#task-modal #taskTeamButton").on("task.team.change", function(e, team) {

                            var teamId = team.Id;
                            $("i.owner-busy").show();

                            $("span.view-list-error").text("");
                            window.candidateTaskOwners = [];
                            Visualforce.remoting.Manager.invokeAction("CS_ARTemplateCC.retrieveUsersInTerritory",
                            teamId, function(users, event) {
                                    
                                if ( event.status ) {

                                    // sort by name
                                    users.sort(function(a, b) {
                                        var nameA = a.Name.toUpperCase();
                                        var nameB = b.Name.toUpperCase();
                                        return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;
                                    });

                                    // clear the old typeahead on the input
                                    $("#task-modal input.task-owner-typeahead").typeahead('destroy','NoCached');

                                    // init a new one on the input
                                    $("#task-modal input.task-owner-typeahead").typeahead({
                                        
                                        minLength: 0,
                                        items: 150,
                                        source: users,
                                        showHintOnFocus: true,                    
                                        displayText: function(item) {
                                            return globalDecodeEntities(item.Name);
                                        },
                                        afterSelect: function(item) {
                                            $("#task-modal input.task-owner").val(globalDecodeEntities(item.Name));
                                            $("#task-modal select.task-owner").val(item.Id);
                                        }
                        
                                    });


                                    // include the current user if they don't already exist and make them the default
                                    var curUser = {
                                        Id: "{!$User.Id}",
                                        Name: "{!$User.FirstName} {!$User.LastName}"
                                    };

                                    // ( i don't trust array.indexOf()... )
                                    var found = false;
                                    for ( var i=0; i < users.length; i++) {
                                        if ( users[i].Id == curUser.Id ) {
                                            found = true;
                                            break;
                                        }
                                    }

                                    if ( !found ) {
                                         users.push(curUser);
                                    }

                                    // setup the pickist
                                    $("#task-modal select.task-owner").empty();
                                    for (var i=0; i < users.length; i++) {
                                        $("#task-modal select.task-owner")
                                            .append("<option value='"+users[i].Id+"'>"+globalDecodeEntities(users[i].Name))+"</option>";
                                    }

                                    // set the default to current user always
                                    $("#task-modal input.task-owner").val(globalDecodeEntities(curUser.Name));
                                    $("#task-modal select.task-owner").val(curUser.Id);                                   

                                } else {

                                    $("span.owner-error").text(event.message);

                                }
                                    
                                $("i.owner-busy").hide();

                                // let anyone know who's listening the team change has finished
                                $("#task-modal #taskTeamButton").trigger("task.team.changed");
                                    
                            });
                        });

                        // display list views when associating an opportunity or case
                        $("#task-modal .association-button").on("click", function(e) {
                            e.preventDefault();
                            e.stopPropagation();

                            var selectedTaskType = $("#task-modal select.task-type").val();
                            console.log("type="+selectedTaskType);

                            if ( selectedTaskType == "opportunity") {
                                // user is asking for a list of opportunities

                                $("i.list-view-busy").show();
                                $("span.view-list-error").text("");
                                Visualforce.remoting.Manager.invokeAction("CS_ARTemplateCC.retrieveOpportunitiesInMyTeamTerritory",
                                function(opportuityWrappers, event) {
                                    if ( event.status ) {

                                        taskOppGridOptions.api.setRowData(opportuityWrappers);

                                        var allColumnIds = [];
                                        taskOppGridColDef.forEach( function(colDef) {
                                            allColumnIds.push(colDef.field);
                                        });
                                        // taskOppGridOptions.columnApi.autoSizeColumns(allColumnIds);

                                        $("#task-modal .list-views.task-opp-grid").show();
                                        $("#task-modal .data-views").slideUp();

                                    } else {

                                        $("span.view-list-error").text(event.message);

                                    }
                                    $("i.list-view-busy").hide();
                                    
                                });

                            } else if (selectedTaskType == "case")  {
                                // user is asking for a list of cases

                                $("i.list-view-busy").show();
                                $("span.view-list-error").text("");
                                Visualforce.remoting.Manager.invokeAction("CS_ARTemplateCC.retrieveCalendarEvents",
                                function(calendarEvents, event) {
                                    if ( event.status ) {

                                        taskCaseGridOptions.api.setRowData(calendarEvents);

                                        var allColumnIds = [];
                                        taskCaseGridColDef.forEach( function(colDef) {
                                            allColumnIds.push(colDef.field);
                                        });
                                        // taskCaseGridOptions.columnApi.autoSizeColumns(allColumnIds);

                                        $("#task-modal .list-views.task-case-grid").show();
                                        $("#task-modal .data-views").slideUp();

                                    } else {

                                        $("span.view-list-error").text(event.message);

                                    }
                                    $("i.list-view-busy").hide();
                                    
                                });

                            } 
                        });

                        // closes the table view without any selection
                        $("#task-modal button.close-list-view").on("click", function(e) {
                            e.preventDefault();
                            e.stopPropagation();

                            $("#task-modal .list-views").hide();
                            $("#task-modal .data-views").show();
                        
                        });

                        // when the task modal closes (reset everything back to defaults)
                        $("#task-modal").on('hidden.bs.modal', function (e) {

                            $("#task-modal").removeAttr("data-record-id");
                            
                            $("#task-modal .disable-on-close").attr("disabled","true");
                            $("#task-modal .hide-on-close").hide();

                            $("#task-modal input.clear-on-close").val("");
                            $("#task-modal input.surgeon").attr("data-record-id", "");

                            $("#task-modal textarea.clear-on-close").val("");
                            $("#task-modal select.clear-on-close").each(function() {
                                $(this).val( $(this).find("option:first").val() );
                            });

                            var taskTypeLabel = $("#task-modal select.task-type").find("option:selected").text();
                            $("#task-modal .task-type-label").text( taskTypeLabel );

                            // remove the leads app option if it was added during an edit operation
                            $("#task-modal select.task-type option[value='leads-app']").remove();

                            $("#task-modal div.clear-on-close").empty();
                            $("#task-modal span.clear-on-close").empty();                  

                            $("#task-modal div.association-search").hide();
                            $("#task-modal input.association-search-input").val("");
                            $("#task-modal input.association-search-input").hide();
                            $("#task-modal span.association").text( "" );
                            $("#task-modal select.associated-with").val("none");
                            $("#task-modal select.associated-with").show();

                            $("#task-modal input.other-subject").removeAttr("disabled");
                            $("#task-modal textarea.description").removeAttr("disabled");

                            // prioity goes to normal
                            $("#task-modal .btn-group.priority button.btn-primary").removeClass("btn-primary").addClass("btn-default");
                            $("#task-modal .btn-group.priority button[data-value=Normal]").addClass("btn-primary");

                            // status goes to new
                            $("#task-modal .btn-group.status button.btn-primary").removeClass("btn-primary").addClass("btn-default");
                            $("#task-modal .btn-group.status button[data-value=New]").addClass("btn-primary");

                            // reset any open list views
                            $("#task-modal .list-views").hide();
                            $("#task-modal .data-views").show();

                            // reset back to initial owner
                            DDTEAMTREE=true;
                            $("#task-modal #taskTeamButton").closest("div.dropdown").find("input[type=radio]").first().click();

                            // silence any field error messages
                            $("#task-modal .help-text.required").hide();

                        });

                            

                            // reset due date
                            //Commented by srini on 7.16.2017 because of the error in the console.
                            //$("#task-modal div.dueDate-container").data("DateTimePicker").clear();

                // define the task opp grid for opportunity list
                        window.taskOppGridColDef = [{ 
                            headerName: "Name", 
                            field: "opportunityName", 
                            headerClass: "header-left", 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{  
                            headerName: "Team", 
                            field: "accountTerritory", 
                            headerClass: "header-left", 
                            hide: false, 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Owner", 
                            field: "owner", 
                            headerClass: "header-left", 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{ 
                            headerName: "Surgeon", 
                            field: "surgeon", 
                            headerClass: "header-left", 
                            cellClass: "bootstrap-font",
                            cellRenderer: function(params) {
                                        
                                    var surgHtml = "";
                                    var moreSurgeons = params.data.opportunitySurgeons;  
                                    if ( typeof moreSurgeons !== "undefined") {
                                        for ( var i=0; i < moreSurgeons.length; i++) {
                                            var surgeon = moreSurgeons[i];
                                            if ( typeof surgeon.Surgeon__r != "undefined" ) {
                                                surgHtml += "<div>"+globalDecodeEntities(surgeon.Surgeon__r.Name)+"</div>";
                                            }

                                        }
                                    }

                                    return surgHtml;
                                }
                        },{
                            headerName: "Account", 
                            field: "account", 
                            headerClass: "header-left", 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Product Category", 
                            field: "productCategory", 
                            headerClass: "header-left", 
                            hide:true,  
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Potential FY<br/>Revenue", 
                            field: "currentFYRevenue", 
                            headerClass: "header-left",  
                            hide:false, 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Opportunty Type", 
                            field: "opportunityType", 
                            headerClass: "header-left", 
                            hide:false, 
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Stage", 
                            field: "currentStage", 
                            headerClass: "header-left", 
                            hide:true,  
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        },{
                            headerName: "Projected Close Date", 
                            field: "closeDate", 
                            filter: 'date', 
                            hide:true, 
                            headerClass: "header-left",  
                            cellClass: "bootstrap-font",
                            cellRenderer: function( params ) {
                                return globalDecodeEntities(params.value);
                            }
                        }];  
                        
                        window.taskOppGridOptions = { 
                            enableSorting: true,
                            enableFilter: true,
                            rowSelection: 'single',
                            enableColResize: true, 
                            columnDefs: taskOppGridColDef, 
                            paginationPageSize: 20,
                            pagination: true,
                            suppressPaginationPanel: true,
                            icons: { 
                                menu: '<i class="fa fa-sort-desc" ></i>' 
                            },
                            getRowHeight: function(params) {
                                // rowheight = 40 + 40 * number of additional surgeons
                                console.log("rowheight = "+(40 + ( params.data.opportunitySurgeons.length * 20 )));
                                return 40 + ( params.data.opportunitySurgeons.length * 10 );
                            },
                            onSelectionChanged: function() {
                                var row = taskOppGridOptions.api.getSelectedRows()[0];

                                var recordId = row.opportunityId;
                                var name = row.opportunityName;
                                var accountName = row.account;
                                var accountId = row.accountId;

                                $("#task-modal .associated-object").val(globalDecodeEntities(name));
                                $("#task-modal .associated-object").attr("data-record-id", recordId);

                                $("#task-modal .list-views").hide();                            

                                $("#task-modal input.account").attr("data-record-id", accountId).val(globalDecodeEntities(accountName));
                                
                                $("#task-modal div.ctag-list.surgeon").empty();
                                for ( var i=0; i < row.opportunitySurgeons.length; i++) {
                                    console.log(row.opportunitySurgeons[i]);
                                   $("#task-modal div.ctag-list.surgeon").append(obj2ctag({
                                        Id: row.opportunitySurgeons[i].Surgeon__r.Id,
                                        Name: row.opportunitySurgeons[i].Surgeon__r.Name
                                    }));
                                }
                                
                                $("#task-modal .data-views").show();
                                $("#task-modal .account-container").show();
                                $("#task-modal .surgeon-container").show();
                                populateAccountTeam(accountId, 'Task');
                                // subject default focus
                                $("#task-modal input.other-subject").focus();
                            },
                            onPaginationChanged: function() {

                                var currPage = taskOppGridOptions.api.paginationGetCurrentPage();
                                $('#task-opp-grid-lbPageSize').text(taskOppGridOptions.api.paginationGetRowCount());
                                $('#task-opp-grid-lbFirstRow').text((taskOppGridOptions.api.paginationGetPageSize() * currPage) + 1);

                                var allRowsCount = Number(taskOppGridOptions.api.getModel().getRowCount()); 
                                var currentPaginationsize = taskOppGridOptions.api.paginationGetPageSize() * (currPage+1); 
                                $('#task-opp-grid-lbLastRow').text( currentPaginationsize > allRowsCount ? allRowsCount: currentPaginationsize );

                            },
                            onFilterChanged: function(value) {
                                taskOppGridOptions.api.setQuickFilter(value);
                            }
                        };

                        window.taskOppGrid = new agGrid.Grid($('#taskOppGrid')[0], taskOppGridOptions); 
                        // end opp grid


                        // define the case grid for task type case
                        window.taskCaseGridColDef = [{
                                headerName: "Date/Time", 
                                field: "startDate",  
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities( moment(params.value).format("M/D/YYYY h:mm A") );
                                }
                            },{
                                headerName: "Account", 
                                field: "provider", 
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{  
                                headerName: "Product Team", 
                                field: "productCategory", 
                                hide: true, 
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{
                                headerName: "Procedure", 
                                field: "procedure", 
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{
                                headerName: "Surgeon", 
                                field: "practitioner", 
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font", 
                                colId: "surgeonName",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{
                                headerName: "Team", 
                                field: "ownerProviderTerritory", 
                                hide:false,
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{
                                headerName: "Attendees", 
                                field: "participantList",
                                hide:true, 
                                headerClass: "header-left", 
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            },{
                                headerName: "Status", 
                                field: "status", 
                                headerClass: "header-left", 
                                hide:false,  
                                cellClass: "bootstrap-font",
                                cellRenderer: function( params ) {
                                    return globalDecodeEntities(params.value);
                                }
                            }]; 
                        
                
                
                        window.taskCaseGridOptions = { 
                            enableSorting: true,
                            enableFilter: true,
                            rowSelection: 'single',
                            enableColResize: true,
                            paginationPageSize: 20,
                            columnDefs: taskCaseGridColDef,
                            pagination: true,
                            suppressPaginationPanel: true,
                            icons: { 
                                    menu: '<i class="fa fa-sort-desc" ></i>' 
                           },
                           onSelectionChanged: function() {
                                var row = taskCaseGridOptions.api.getSelectedRows()[0];
                                var recordId = row.url;

                                var startDate = moment(row.startDateTime).format("M/D/YYYY h:mm A");
                                var surgeon = row.practitioner;
                                var surgeonId = row.practitionerId;
                                var account = row.provider;
                                var providerId = row.providerId;

                                var name = startDate;

                                $("#task-modal input.account").attr("data-record-id", providerId).val(globalDecodeEntities(account));
                                $("#task-modal div.ctag-list.surgeon").empty();
                                $("#task-modal div.ctag-list.surgeon").append(obj2ctag({
                                    Id: surgeonId,
                                    Name: surgeon
                                }));
                                
                                // surgeon ctags are read-only, remove the ability to delete them
                                $("span[data-role=remove-tag]").remove();

                                $("#task-modal .associated-object").val(globalDecodeEntities(name));
                                $("#task-modal .associated-object").attr("data-record-id", recordId);

                                $("#task-modal .list-views").hide();

                                $("#task-modal .data-views").show();
                                $("#task-modal .account-container").show();
                                $("#task-modal .surgeon-container").show();
                                populateAccountTeam(providerId, 'Task');
                                // subject default focus
                                $("#task-modal input.other-subject").focus();
                                
                                
                                
                            },
                            onPaginationChanged: function() {

                                var currPage = taskCaseGridOptions.api.paginationGetCurrentPage();
                                $('#task-case-grid-lbPageSize').text(taskCaseGridOptions.api.paginationGetRowCount());
                                $('#task-case-grid-lbFirstRow').text((taskCaseGridOptions.api.paginationGetPageSize() * currPage) + 1);

                                var allRowsCount = Number(taskCaseGridOptions.api.getModel().getRowCount()); 
                                var currentPaginationsize = taskCaseGridOptions.api.paginationGetPageSize() * (currPage+1); 
                                $('#task-case-grid-lbLastRow').text( currentPaginationsize > allRowsCount ? allRowsCount: currentPaginationsize );

                            },
                            onFilterChanged: function(value) {
                                taskCaseGridOptions.api.setQuickFilter(value);
                            }
                                                             
                        };
                        window.taskCaseGrid = new agGrid.Grid($('#taskCaseGrid')[0], taskCaseGridOptions);

                        window.taskModal2TaskObj = function() {

                            // always use hte free-form text box - chad 2017-06-22
                            // var subjectStr = $("#task-modal select.subject").val();
                            var subjectStr = 'other';
                            if ( subjectStr == 'other' ) { 
                                subjectStr = $("#task-modal input.other-subject").val();
                            }

                            var whatIds = [];
                            var whatId = $("#task-modal input.associated-object").attr("data-record-id");
                            if ( typeof whatId != "undefined" && whatId.length > 0 ) {
                                whatIds.push(whatId);
                            }

                            var whoIds = [];
                            $("#task-modal div.ctag-list.surgeon").children().each(function() {
                                if ( $(this).attr("data-record-id") ) {
                                    whoIds.push($(this).attr("data-record-id"));
                                }
                                
                            });

                            var taskType = "axis-activity";
                            if ( typeof window.currentTask != "undefined" && !window.currentTask.isAxisTask ) {
                                // this is a leads app task edit
                                taskType = "LeadsApp";
                            }

                            var task = {
                                id: $("#task-modal").attr("data-record-id"),
                                priority: $("#task-modal button.priority.btn-primary").attr("data-value"),
                                status: $("#task-modal button.status.btn-primary").attr("data-value"),
                                dueDate: $("#task-modal input.dueDate").val(),
                                subject: subjectStr,
                                description: $("#task-modal textarea.description").val(),
                                ownerId: $("#task-modal select.task-owner").val(),
                                contactEmail: $("#task-modal input.contactEmail").val(),
                                contactPhone: $("#task-modal input.contactPhone").val(),
                                notes: $("#task-modal textarea.notes").val(),
                                accountId: $("#task-modal input.account").attr("data-record-id"),

                                whatIdList: whatIds,
                                whoIdList: whoIds,
                                type: taskType                         
                            };

                            return task;
                        };

                        // end added by chad - task related code 
                    
                        $('#session-timeout-modal').on('hidden.bs.modal', function (e) {
                            //alert('Site.Prefix :'+ $Site.Prefix);
                            document.location.href = "{!$Site.BaseUrl}/ARLogin";//$Site.Prefix/ARLogout";
                        });
                        
                        resetSession();

                        $("button.eula-cancel-btn").on("click", function() {
                            //alert({!$Site.Prefix});
                            document.location.href = "{!$Site.BaseUrl}/ARLogin";
                            //document.location.href = "$Site.Prefix/secur/logout.jsp";
                        });

                        $("button.eula-save-btn").on("click", function() {
                            $("i.eula-busy").show();
                            Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARTemplateCC.acceptEula}",
                            function(result, event) {                                 
                                $("#eula").modal("hide");
                                $("i.eula-busy").hide();
                            });
                        });
                        
                        
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARTemplateCC.retrieveHelpTypeOptions}",
                        function(result, event) { 
                            
                            console.log(result);

                            $("div.help-form select.type").append("<option value=''> -- Select -- </option>");
                            for ( var i=0; i < result.length; i++ ) {
                                //("div.help-form select.type").append("<option value=''")
                                $("div.help-form select.type").append("<option value='"+result[i]+"'>"+result[i]+"</option>");
                            }
                        
                        });

                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARTemplateCC.retrieveUserProperties}",
                        function(result, event) { 

                            if ( event.status ) {

                                console.log(result.profileName);
                                if ( typeof result.profileName === "undefined" || result.profileName == null ) {
                                    // we should always have a profileName, something is very wrong logout to be safe
                                    document.location.href = "{!$Site.Prefix}/secur/logout.jsp";
                                
                                } else {

                                    var userProfile = result.profileImage;
                                    var userName = result.profileName;
                                     
                                    $("div.cprofile-image img").prop("src", userProfile);
                                    $("img.logo").prop("src", userProfile);
                                    $("span.uname").text(globalDecodeEntities(userName));
                                    
                                    // make the user props global
                                    window.userProps = result;

                                    if ( !result.acceptedEula ) {
                                        $("#eula").modal("show");
                                    }

                                }

                            } else {

                                // something went wrong, logout
                                document.location.href = "{!$Site.Prefix}/secur/logout.jsp";

                            }

                        });

                        $("a.open-help").on("click", function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            
                            $(".type option[value='New Surgeon Request']").remove();
                            $("#help input.name").val( globalDecodeEntities(window.userProps.profileName) );
                            $("#help input.email").val( window.userProps.email );

                            if ( window.userProps.mobile ) {
                                $("#help input.phone").val( window.userProps.mobile );
                            } else {
                                // if mobile isn't available fall back to office phone
                                $("#help input.phone").val( window.userProps.officePhone );
                            }
                            
                            $("div.help-form select.type").val("");
                            $("div.help-form textarea.description").val("");
                            $("#help").modal("show");
                        })

                        $("button.submit-help").on("click", function(e) {
                            e.preventDefault();
                            e.stopPropagation();
                            
                            //alert("Description : " +$("div.help-form textarea.description").val());
                            var submission = {
                                name : $("div.help-form input.name").val() || "",
                                email : $("div.help-form input.email").val() || "",
                                phone : $("div.help-form input.phone").val() || "",
                                subject : $("div.help-form input.subject").val() || "",
                                description : $("div.help-form textarea.description").val() || "",
                                type: $("div.help-form select.type").val() || ""
                            };

                            var hasEmptyFields = false;
                            var invalidEmail = false;
                            if ( submission.name.length === 0 ) { hasEmptyFields = true; }
                            if ( submission.email.length === 0 ) { hasEmptyFields = true; }
                            if ( submission.phone.length === 0 ) { hasEmptyFields = true; }
                            /*if ( submission.subject.length === 0 ) { hasEmptyFields = true; }*/
                            if ( submission.description.length === 0 ) { hasEmptyFields = true; }
                            if ( submission.type.length === 0 ) { hasEmptyFields = true; }

                            
                            if ( submission.email.length > 0 ) {
                                var validEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                                invalidEmail = !validEmailRegex.test(submission.email);
                            }

                            if ( hasEmptyFields ) {
                                
                                $("div.help-form div.error").text("All fields are required");   

                            } else if ( invalidEmail ) {
                            
                                $("div.help-form div.error").text("Your email is not valid");   
                            
                            } else if (submission.description.length > 500 ){
                                $("div.help-form div.error").text("Description has to less than 500 characters");
                            } else {
                                //  Setting the Subject
                                if( window.userProps.profileName ){
                                    submission.subject = "AXIS Support Ticket - Authenticated User.";
                                    submission.Origin = "Web";
                                } else {
                                    submission.subject = "AXIS Support Ticket - Unauthenticated User.";
                                }
                                
                                Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARTemplateCC.submitHelp}",
                                submission,
                                function(result, event) {
                                    console.log("submission: "+submission);
                                    $("div.help-form input").val("");
                                    $("div.help-form textarea").val("");
                                    $("div.help-form error").text("");
                                                                        
                                    $('#help').modal('hide');

                                    toastr.options = {
                                        "positionClass": "toast-top-left",
                                    };
                                    toastr.success("Thanks for submitting your request, please check you email for reference information");


                                });                                
                            }

                        
                        });// end of submit-button help
                        
                        //Code added by Mimansha(4/17/2017) for Component CID 000177(Save Warning Modal) in Contact US modal   
                        $("#cancel-help button.btn-close-contact-us-warning").on("click", function(e) {                     
                            $("#cancel-help").modal('hide');
                            $("#help").modal('hide');
                        }); //  end of cancel Help modal.cancel click
                
                        $("#help button.help-cancel-btn").on("click", function() {
               
                            $("#cancel-help").modal("show");                   
                        }); //  end of Help modal.close click
                        
                        //Code added by Mimansha(4/17/2017) for Component CID 000177(Save Warning Modal) in Add/Edit Case modal   
                        $("#cancel-case-prop-modal button.btn-cancel-case-warning").on("click", function(e) {                     
                            $("#cancel-case-prop-modal").modal('hide');
                            $("#case-prop-modal").modal('hide');
                        }); //  end of cancel Case modal.cancel click
                
                        $("#case-prop-modal button.case-cancel-btn").on("click", function() {
               
                            $("#cancel-case-prop-modal").modal("show");                   
                        }); //  end of Case modal.close click
                        
                        // Swetha - Jan 25 2017 - START
                        $("#opportunity-modal button.opportunity-type-cancel-btn").on("click", function() {
               
                            $("#cancel-new-opportunity-modal").modal("show");
                            if($('#opportunity-modal span.modal-title-txt').text() == 'New Opportunity')
                            {
                                console.log('New Opp Modal Header'+$('#opportunity-modal span.modal-title-txt').text());
                                console.log('Inside New Opp');
                                $('#cancel-new-opportunity-modal .modal-title').html('New Opportunity');
                            }
                            else if($('#opportunity-modal span.modal-title-txt').text() == 'Edit Opportunity')
                            {
                                console.log('Edit Opp Modal Header'+$('#opportunity-modal span.modal-title-txt').text());
                                console.log('Inside New Opp');
                                $('#cancel-new-opportunity-modal .modal-title').html('Edit Opportunity');
                            }
                            else
                            {
                                $('#cancel-new-opportunity-modal .modal-title').html('Clone Opportunity');
                            }
                            
                                               
                        }); //  end of opp type modal.cancel click
                    
                         $("#cancel-new-opportunity-modal button.btn-cancel-opportunity-card").on("click", function(e) {                     
                            $("#cancel-new-opportunity-modal").modal('hide');
                            $("#opportunity-modal").modal('hide');
                        }); //  end of opp type modal.cancel click
                        // Swetha - Jan 25 2017 - END
                        
                        //     ------------------------ Mimansha Code ENDS ---------------------------

                        $('.i-checks').iCheck({
                            checkboxClass: 'icheckbox_square-green',
                            radioClass: 'iradio_square-green'
                        });

                        /* initialize the external events
                         -----------------------------------------------------------------*/
                        $('#external-events div.external-event').each(function() {

                            // store data so the calendar knows to render an event upon drop
                            $(this).data('event', {
                                title: $.trim($(this).text()), // use the element's text as the event title
                                stick: true // maintain when user navigates (see docs on the renderEvent method)
                            });

                            // make the event draggable using jQuery UI
                            $(this).draggable({
                                zIndex: 1111999,
                                revert: true,      // will cause the event to go back to its
                                revertDuration: 0  //  original position after the drag
                            });

                        });
                        
                        
                        $(document).on("selection:deleted", function(event, modalSelector) {
                            /*
                                One of the ctag from the list of selected items was deleted so
                                need to sync the drop down selections with the ones in selected
                                list
                            */
                            syncSelectionAfterDelete(modalSelector);
                        });
                        
                        //added by srinivas sattoor for 3.2 04.24.2017 CD-180
                        
                        $('#opportunity-modal input.opportunity-part-quantity').on('input',function(e){
                            calculatePartsPrice(e);
                        });
                    
                        $('#opportunity-modal input.opportunity-part-unit-price').on('input',function(e){
                            calculatePartsPrice(e);
                        });
                        
                        //Added by srinivas sattoor on 6.21.2017 for 4.1 for team functionality on opportunity
                        $("#divOpportunityTeamFacet i[id$='toggle']").on('click', function(event){
                            targetDiv = $(this).attr('data-target');
                            $("#"+targetDiv).collapse('toggle');
                            
                            if($(this).hasClass('fa-chevron-up')){
                                $(this).removeClass('fa-chevron-up');
                                $(this).addClass('fa-chevron-down');
                            } else {
                                $(this).removeClass('fa-chevron-down');
                                $(this).addClass('fa-chevron-up');
                            }
                        });
                        
                        //Added by srinivas sattoor on 6.21.2017 for 4.1 for team functionality on cases
                        $("#divCaseTeamFacet i[id$='toggle']").on('click', function(event){
                            targetDiv = $(this).attr('data-target');
                            $("#"+targetDiv).collapse('toggle');
                            
                            if($(this).hasClass('fa-chevron-up')){
                                $(this).removeClass('fa-chevron-up');
                                $(this).addClass('fa-chevron-down');
                            } else {
                                $(this).removeClass('fa-chevron-down');
                                $(this).addClass('fa-chevron-up');
                            }
                        });


                    }); //  end of ready function
                    
                    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
                    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
                    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
                    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
                    
                    ga('create', 'UA-73832506-1', 'auto');
                    ga('send', 'pageview');
                    
                    function populateCaseModal(calEvent, modalTitle){
                        // populate the case modal with the calEvent data
                        $("#case-prop-modal").attr("data-record-id",calEvent.url);

                        //$("#case-prop-modal").attr("data-calevent-id",calEvent.id);

                        $("#case-prop-modal input.start-date").val(moment(calEvent.startDate).format("MM/DD/YYYY h:mm A"));
                        $("#case-prop-modal input.end-date").val(moment(calEvent.endDate).format("MM/DD/YYYY h:mm A"));

                        $("#case-prop-modal input.provider").attr("data-record-id", calEvent.providerId);
                        
                        $("#case-prop-modal input.provider").val(globalDecodeEntities(calEvent.provider));

                        $("#case-prop-modal input.practitioner").attr("data-record-id", calEvent.practitionerId);
                        $("#case-prop-modal input.practitioner").val(globalDecodeEntities(calEvent.practitioner));
                        
                        //$("#case-prop-modal input.procedure").val(calEvent.procedure);

                        if ( calEvent.status == null ) {
                          $("#case-prop-modal select.status option:first").attr('selected','selected');
                        } else {
                          $("#case-prop-modal select.status").val(calEvent.status);
                        }        
                        
                        $("#case-prop-modal textarea.notes").val(calEvent.description);
                        
                         
                        
                        // for the time being, you can only delete an event if you are the owner
                        if ( calEvent.ownerId == currentUserId  ) {    
                            // turn on the delete button
                            $("#case-prop-modal button.case-delete-btn").show();
                        }

                        // turn on the export button
                        $("#case-prop-modal button.case-export-btn").show();

                        // Editing an existing the current user owns
                        $("#case-prop-modal span.modal-title-txt").text(modalTitle);// Updated by srinivas sattoor 3.2 05/17/2017
                                                        
                        // make all the inputs enabled
                        $("#case-prop-modal input").removeAttr("disabled");                                

                        // trigger practitioner record id set to init the pref cards
                        $("#case-prop-modal input.practitioner").trigger("record-id-set");
                        
                        
                        if(modalTitle == 'Edit Case' || modalTitle == 'Clone Case'){
                            //make team as readonly
                            $('#case-prop-modal  #caseTeamButton').attr('readonly', 'readonly'); 
                            $('#case-prop-modal  #caseTeamButton').attr("disabled", true);  
                            $('#case-prop-modal  #caseTeamButton').addClass('inputDisabled');
                            //populateAccountAndSurgeonTypeaheadOnEdit(calEvent.providerId, 'Case');
                            populateAccountTeam(calEvent.providerId, 'Case'); //Added by SrinivasSattoor for 4.1 07.12.2017
                        }else{
                            //populateOwnerInfo(calEvent.ownerId); 
                            populateOwnerInfo(calEvent.ownerId);
                        }
                        
                        // show the modal
                        $("#case-prop-modal").modal('show');
                        
                    }   //  end of populateCaseModal
                    
                    
                    /**
                    * @author Original: Srinivas Sattoor Accenture, Last Modified:  NA
                    * @date Original: Initial Release, Last Modified: 06.26.2017 
                    * @releases: 4.1
                    * @component: CID-000284 
                    * @description: This function populates the drop down for owner in case creation. 
                    */ 
                    function populateOwnerInfo(ownerId){
                        
                        $("#case-prop-modal i.case-owner-busy").show();  
                        var existingOwnerId = $("input#hidden_case_ownerId").val() || currentUserId;
                        var ownerId = $("input#oppOwnerId").val() || currentUserId; 
                        selectedTeam = $("#divCaseTeamFacet div#treeCaseTeam input[name='rdTeamTree']:checked").val() || '';
                        if(ownerId && !ownerId.startsWith("005")){
                            selectedTeam = ownerId;
                        } 
                        console.log('##--populateOwnerInfo.selectedTeam: '+ selectedTeam);
                        console.log('##--populateOwnerInfo.existingOwnerId: '+ existingOwnerId);
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.retrieveUsersInMyTeamTerritory}",
                        selectedTeam,
                        function(result, event) {
                            
                            $('#case-prop-modal .case-owner').empty(); 
                            
                            $.each(result, function(key, value) {
                                 $('#case-prop-modal .case-owner')
                                     .append($("<option></option>")
                                                .attr("value",value.Id)
                                                .text(globalDecodeEntities(value.Name))); 
                            });
                        
                            //console.log("Owner Has: " + ownerId + "\t in the list: " + $("#case-prop-modal .case-owner option[value='"+ownerId+"']").length);
                            if($("#case-prop-modal .case-owner option[value='"+existingOwnerId+"']").length > 0){
                                $('#case-prop-modal .case-owner').val(existingOwnerId);
                            } else{
                                //$('#case-prop-modal .case-owner').prop('disabled', 'disabled');
                                $('#case-prop-modal .case-owner').val("");
                            }
                            $("#case-prop-modal i.case-owner-busy").hide();
                        
                        }); //  end of remote call 
                        
                    }
                    
                    function validateAndSubmit(){
                
                     name = $("#help input.name").val() || "";
                     email = $("#help input.email").val() || "";
                     phone = $("#help input.phone").val() || "";
                     description = $("#help textarea.description").val() || "";
                     type = $("#help select.type").val() || "";

                     var hasEmptyFields = false;
                     var invalidEmail = false;
                     if ( name.length === 0 ) { hasEmptyFields = true; }
                     if ( email.length === 0 ) { hasEmptyFields = true; }
                     if ( phone.length === 0 ) { hasEmptyFields = true; }
                     if ( description.length === 0 ) { hasEmptyFields = true; }
                     if ( type.length === 0 ) { hasEmptyFields = true; }

                     
                     if ( email.length > 0 ) {
                         var validEmailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                         invalidEmail = !validEmailRegex.test(email);
                     }

                     if ( hasEmptyFields ) {
                         
                         $("#help div.error").text("All fields are required");   

                     } else if ( invalidEmail ) {
                     
                         $("#help div.error").text("Your email is not valid");   
                     
                     } else if (description.length > 500 ){
                        $("#help div.error").text("Description has to less than 500 characters");
                        
                     } else {
                        
                        url = $("#contactForm").attr("action");
                        orgid = $("#orgid").val();
                        retURL = $("#retURL").val();
                        
                        $.post( url, { orgid: orgid, retURL: retURL, name: name, email: email, phone: phone, type: type, subject: "AXIS Support Ticket - Authenticated User.", description: description },
                                function( data ) {
                                    
                                    $('#help').modal('hide');
                                    
                                    toastr.options = {
                                        "positionClass": "toast-top-left",
                                    };
                                    toastr.success("Thanks for submitting your request, please check you email for reference information!");
                                } );
                        
                     }  //  end of if-else
                     
                }   //  end of validateForm
                
                function search(q, controllerMethod, successCallback, errorCallback) {
                    // calls a search method on the controller, method passed in as a param
        
                    Visualforce.remoting.Manager.invokeAction(controllerMethod,
                    q,
                    function(result, event) {
                        if (event.status) {
                            successCallback(result);
                        } else {
                            if ( typeof errorCallback === 'function' ) {
                                errorCallback(event);
                            } else {
                                console.log("Errors returned but no error handler found");
                            }
                        }
                    });
                
                }   //  end of search
                
                    
                function showCreateCaseModal(){
                    //$("#case-prop-modal div[id^='divCase']").hide();
                    $("#case-prop-modal div[id^='divCaseSurgicalTechnique']").hide();
                    $("#case-prop-modal select.status option:first").attr('selected','selected');
                    $("#case-prop-modal button.case-detail-save-and-btn").hide();
                    $("#case-prop-modal span.modal-title-txt").text("Create Case");
                    
                    //make team as editable
                    $('#case-prop-modal  #caseTeamButton').removeAttr('readonly'); 
                    $('#case-prop-modal  #caseTeamButton').prop("disabled", false);  
                    $('#case-prop-modal  #caseTeamButton').removeClass('inputDisabled');
                    $('#case-prop-modal').modal('show');
                    
                    populatePractitionersTypeaheadOnCases('', true);
                    populateProvidersTypeaheadOnCases('', true);
                    //$("#case-prop-modal button.case-save-and-btn").hide();
                }   //  end of showCreateCaseModal
                
                
                /*
                    Util functions
                */
                function inArray(value, array){
                    return ($.inArray(value, array) >= 0);
                }   //  end of inArray
                var DDTEAMTREE=false;
                $(document).click(function (event) {
                 if(DDTEAMTREE){
                            var clickover = $(event.target);
                            console.log('##--event.target.id==='+event.target.id
                                            + 'event.target==='+event.target.className
                                            +'clickover.closest("div").prop("id")==='
                                            +clickover.closest("div").prop("id"));
                            if(! (event.target.id==='TeamButton') 
                                && !(event.target.id==='taskTeamButton')
                                && !(event.target.className === 'fa fa-caret-down') 
                                && !(clickover.closest("div").prop("id") === 'treeTeam') 
                                && ! (event.target.id==='MTD'))
                            {
                                console.log('##--DDTEAMTREE is false');
                                $("div.dropdown").css('display', 'inline-block');
                                $(".dropdown-content").css('display', 'none');
                                $("#caseTeamButton").removeClass("active"); 
                                $("#teamOpportunityButton").removeClass("active");
                                DDTEAMTREE = false;
                            }
                        
                        }

               });

                function showDD(teamButtonId, event){
                   if(! DDTEAMTREE){
                       console.log('##--DDTEAMTREE is false');
                       $("div.dropdown").css('display', 'block');
                       $(".dropdown-content").css('display', 'block');
                       //$("#teamOpportunityButton").addClass("active");
                       if ( teamButtonId != "taskTeamButton") {
                            $("#"+teamButtonId).addClass("active");
                        }
                       DDTEAMTREE = true;
                   } else {
                       console.log('##--DDTEAMTREE is true');
                       $("div.dropdown").css('display', 'inline-block');
                       $(".dropdown-content").css('display', 'none');
                       //$("#teamOpportunityButton").removeClass("active");
                       $("#"+teamButtonId).removeClass("active");
                       /*if(teamButtonId == 'teamOpportunityButton'){
                           populateSurgeonTypeaheadOnOpportunity('');
                           populateProviderTypeaheadOnOpportunity('', false);
                       }*/
                       DDTEAMTREE=false;
                   }
                   event.stopPropagation(); 
                   
               }   //  end of showDD 
                
               $(document).ready(function() {
               
               
                    $('#new-prefcard-modal #select-procedure').on('changed.bs.select', function (e, index, newVal, oldVal) {
                        console.log('Index: ' +index +'\tNewVal: '+ newVal +'\tOldVal: '+ oldVal);
                        //console.log('Event: ' + JSON.stringify(e));
                        
                        
                        tot_options = $('#new-prefcard-modal #select-procedure option').size();
                        var modalSelector = "#new-prefcard-modal";
                        
                        /*if(($("#new-prefcard-modal").data('bs.modal') || {}).isShown){
                            modalSelector = "#new-prefcard-modal";
                        }*/
                        
                        if(newVal && index==(tot_options-1)){
                            console.log('newVal: ' + newVal);
                            console.log('tot_options: ' + tot_options);
                            $('#new-prefcard-modal #select-procedure').selectpicker('toggle');
                            $('#new-prefcard-modal #select-procedure').selectpicker('hide');
                            $(modalSelector + " div#divProcedures").show();
                            
                            initProcedureSearch();
                            
                            //showDD();
                        } else{
                            if(newVal){
                                //.filter(function(i, e){ if(i == index) return e;})
                                
                                opt = $('#new-prefcard-modal #select-procedure option')[index];
                                newItem={};
                                newItem.Id=$(opt).attr('data-record-id');
                                newItem.Name=$(opt).text();
                                
                                $("#new-prefcard-modal div.ctag-list.procedures").append(obj2ctag(newItem));
                                //setProductsFor(newItem.Id, false, 'new-prefcard-modal');
                            } else{
                                opt = $('#new-prefcard-modal #select-procedure option')[index];
                                recId = $(opt).attr('data-record-id');
                                
                                //alert('Remove the Selected procedure form the list');
                                $("#new-prefcard-modal div.ctag-list.procedures span[data-record-id='" + recId + "']").remove();
                                return false;
                            }
                        }   //  end of if-else
                        
                        getSurgicalTechniques(modalSelector);
                        
                        
                    }); //  end of select-procedure change
                    
                    $('#case-prop-modal #select-procedure').on('changed.bs.select', function (e, index, newVal, oldVal) {
                        console.log('Index: ' +index +'\tNewVal: '+ newVal +'\tOldVal: '+ oldVal);
                        console.log('Event: ' + JSON.stringify(e));
                        
                        
                        tot_options = $('#case-prop-modal #select-procedure option').size();
                        var modalSelector = "#case-prop-modal";
                        
                        /*if(($("#new-prefcard-modal").data('bs.modal') || {}).isShown){
                            modalSelector = "#new-prefcard-modal";
                        }*/
                        console.log('##--tot_options1: ' + tot_options);
                        console.log('##--index: ' + index);
                        if(newVal && index==(tot_options-1)){
                            console.log('newVal: ' + newVal);
                            console.log('tot_options2: ' + tot_options);
                            
                            $('#case-prop-modal #select-procedure').selectpicker('toggle');
                            $('#case-prop-modal #select-procedure').selectpicker('hide');
                            $(modalSelector + " div#divProcedures").show();
                            
                            initProcedureSearch();
                            
                            //showDD();
                        } else{
                            if(newVal){
                                //.filter(function(i, e){ if(i == index) return e;})
                                
                                opt = $('#case-prop-modal #select-procedure option')[index];
                                newItem={};
                                newItem.Id=$(opt).attr('data-record-id');
                                newItem.Name=$(opt).text();
                                
                                $(modalSelector + " div.ctag-list.procedures").append(obj2ctag(newItem));
                                //setProductsFor(newItem.Id, false, 'case-prop-modal');
                            } else{
                                opt = $('#case-prop-modal #select-procedure option')[index];
                                recId = $(opt).attr('data-record-id');
                                
                                //alert('Remove the Selected procedure form the list');
                                $(modalSelector + " div.ctag-list.procedures span[data-record-id='" + recId + "']").remove();
                                return false;
                            }
                        }   //  end of if-else
                        
                        getSurgicalTechniques(modalSelector);
                        
                        
                    }); //  end of select-procedure change
                    
                    
                    $('#new-prefcard-modal #select-surgical-technique').on('changed.bs.select', function (e, index, newVal, oldVal) {
                        console.log('Index: ' +index +'\tNewVal: '+ newVal +'\tOldVal: '+ oldVal);
                        //console.log('Event: ' + JSON.stringify(e));
                        
                        tot_options = $('#select-procedure option').size(); 
                        var modalSelector = "#new-prefcard-modal";
                        
                       /* if(($("#new-prefcard-modal").data('bs.modal') || {}).isShown){
                            modalSelector = "#new-prefcard-modal";
                        }*/
                        
                        if(newVal){
                            //.filter(function(i, e){ if(i == index) return e;})
                            
                            opt = $('#new-prefcard-modal #select-surgical-technique option')[index];
                            newItem={};
                            newItem.Id=$(opt).attr('data-record-id');
                            newItem.Name=$(opt).text();
                            
                            $(modalSelector + " div.ctag-list.surgical-technique").append(obj2ctag(newItem));
                            
                            //setProductsFor(newItem.Id, false, 'new-prefcard-modal');
                        } else{
                        
                            opt = $('#new-prefcard-modal #select-surgical-technique option')[index];
                            console.log('##--surg-tech-opt: '+ opt);
                            recId = $(opt).attr('data-record-id');
                            console.log('##--surg-tech-recId: '+ recId);
                            //alert('Remove the Selected proc form the list');
                             $("#new-prefcard-modal div.ctag-list.surgical-technique span[data-record-id='" + recId + "']").remove();
                                return false;
                        }
                        
                    });
                    
                    $('#case-prop-modal #select-surgical-technique').on('changed.bs.select', function (e, index, newVal, oldVal) {
                        console.log('Index: ' +index +'\tNewVal: '+ newVal +'\tOldVal: '+ oldVal);
                        console.log('Event: ' + JSON.stringify(e));
                        
                        tot_options = $('#case-prop-modal #select-procedure option').size(); 
                        var modalSelector = "#case-prop-modal";
                        
                        /*if(($("#new-prefcard-modal").data('bs.modal') || {}).isShown){
                            modalSelector = "#new-prefcard-modal";
                        }*/
                        
                        if(newVal){
                            //.filter(function(i, e){ if(i == index) return e;})
                            
                            opt = $('#case-prop-modal #select-surgical-technique option')[index];
                            newItem={};
                            newItem.Id=$(opt).attr('data-record-id');
                            newItem.Name=$(opt).text();
                            
                            $(modalSelector + " div.ctag-list.surgical-technique").append(obj2ctag(newItem));
                            
                            //setProductsFor(newItem.Id, false, 'case-prop-modal');
                        } else{
                        
                            opt = $('#case-prop-modal #select-surgical-technique option')[index];
                            console.log('##--surg-tech-opt: '+ opt);
                            recId = $(opt).attr('data-record-id');
                            console.log('##--surg-tech-recId: '+ recId);
                            //alert('Remove the Selected proc form the list');
                             $(modalSelector + " div.ctag-list.surgical-technique span[data-record-id='" + recId + "']").remove();
                                return false;
                        }
                        
                    });
                    
                    var procedue_search = '';
                    
                    
                    //  TODO: move it to the CaseModalJs once done..
                    //Added by srinivas sattoor for 4.1
                    $("#case-prop-modal").on('hidden.bs.modal', function (e) {
                        console.log('Empty Case Team on hide');
                        $("#treeCaseTeam").empty();
                    });
                   
                   $("#case-prop-modal").on("show.bs.modal", function(e) {
        
                        $("#case-prop-modal div#divProcedures").hide();
                        $("#case-prop-modal table#tableTaxonomy tbody").empty();
                        $("#case-prop-modal #select-procedure").empty();
                        $("#case-prop-modal #select-procedure").selectpicker('show');
                        $("#case-prop-modal #procedures").val(''); 
                        $("#case-prop-modal #select-surgical-technique").empty();
                        $("#case-prop-modal #select-procedure").selectpicker('refresh');
                        $("#case-prop-modal #select-surgical-technique").selectpicker('refresh');
                        $("#case-prop-modal div.procedures.ctag-list").empty();
                        $("#case-prop-modal div.surgical-technique.ctag-list").empty();
                        $("#case-prop-modal .save-add-error").text("");
                        $("#case-prop-modal #caseTeamButton .text").text("");
                        
                        //  Reset the start and end date to default to current date
                        // Once this method is moved to Case Modal JS need to extract this into a method
                        try{
                        
                            $("#case-prop-modal div.start-date-container").data("DateTimePicker").destroy();
                            $("#case-prop-modal div.end-date-container").data("DateTimePicker").destroy();
                        } catch(e){
                            console.log('ERROR: could not destroy the date time pickers');
                        }
                        
                        $("#case-prop-modal div.end-date-container").datetimepicker({ 
                            stepping:30,
                            useCurrent: false,
                            showClose: true,
                            ignoreReadonly: true
                        });
                        
                        $("#case-prop-modal div.start-date-container").datetimepicker({ 
                            stepping:30,
                            useCurrent: true,
                            showClose: true,
                            ignoreReadonly: true
                        });
                        
                        $("#case-prop-modal div.start-date-container").on("dp.change", function (e) { 
                
                            // end date can't be before the start date 
                            //var selectedDate = e.date.clone(); 
                            
                            var e1 = e.date.clone();
                            var selectedDate = new Date(
                                e1.year(),
                                e1.month(), // Careful, month starts at 0!
                                e1.date(),
                                e1.hour(),
                                e1.minute()+30,
                                e1.second()
                            );    
                            $("#case-prop-modal div.end-date-container").data("DateTimePicker").minDate(selectedDate);
                
                            // default the end date to start date + 1 hrs
                            console.log('##--enddate: '+ $("#case-prop-modal input.end-date").val()); 
                            var selectedDate1 = e.date.clone(); 
                             //   $("#case-prop-modal div.end-date-container").data("DateTimePicker").date( selectedDate1.add(1, 'h') ); 
                 
                        });
                        
                        //populateProvidersTypeaheadOnCases();
                        //populatePractitionersTypeaheadOnCases();
                        //  TODO: Need to prepopulate Product Teams as drop down 
                        var selectList = $("#case-prop-modal select#select-productteam");
                        //var selectListProc = $("#case-prop-modal select#select-procedure");
                        //var selectListSurgicalTechnique = $("#case-prop-modal select#select-surgical-technique");
                        selectList.find("option:gt(0)").remove();
                        Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.getAllProductTeams}",
                            function(result, event) {
                                $.each(result, function(i, v) {
                                    //console.log('##--Product_Category__c:' + v.Product_Category__c);
                                    $('#case-prop-modal #select-productteam')
                                        .append($("<option></option>")
                                            .attr("data-record-id", v.Id)
                                            .attr("value", globalDecodeEntities(v.Product_Category__c))
                                            .text(globalDecodeEntities(v.Name)));
                                });
                        }); //  end of get all Product Teams
                        
                       loadTerritoryTreeForTeam("treeCaseTeam", "case-prop-modal");
                       //populatePractitionersTypeaheadOnCases('', true);
                       //populateProvidersTypeaheadOnCases('', true);
                    
                    }); //  end of case-prop-modal before show
                    
                }); //  end of ready function
                
                
                function initProcedureSearch(){
                    $("#new-prefcard-modal input.procedures-typeahead").typeahead({
                        // typeahead setup for case products 
                        minLength: 3,
                        
                        source: function(query, onSuccess) {
                            procedue_search = query;
                            //productTeam = $("#new-prefcard-modal input.pcard-productteam").val();
                            productTeam = $("#select-productteam").val();
                            query = query + '::' + 'procedure' + '::' + productTeam;
                            search(query, '{!$RemoteAction.CS_ARCCExtension.searchTaxonomy}', onSuccess);
                        },
                        displayText: function(item) {
                            return globalDecodeEntities(item.Name);
                        },
                        afterSelect: function(item) {
                            
                           // alert('Please select another Procedure'); 
                            $("#new-prefcard-modal .save-add-error").text("Procedure already exists. Please select another Procedure");
                            $("#new-prefcard-modal input.procedures-typeahead").val(procedue_search); 
                        }
                    }); //  end of typeahed of other Procedure
                    
                    $("#new-prefcard-modal input.other-procedures-typeahead").typeahead({
                        // typeahead setup for case products 
                        minLength: 3,
                        
                        source: function(query, onSuccess) {
                            procedue_search = query; 
                            //productTeam = $("#select-productteam").val();
                            query = query + '::' + 'procedure';
                            search(query, '{!$RemoteAction.CS_ARCCExtension.searchTaxonomy}', onSuccess);
                        },
                        displayText: function(item) {
                            return globalDecodeEntities(item.Name);
                        },
                        afterSelect: function(item) {
                            
                            //alert('Please select another Procedure');
                            $("#new-prefcard-modal .save-add-error").text("Procedure already exists. Please select another Procedure");
                            $("#new-prefcard-modal input.procedures-typeahead").val(procedue_search); 
                        }
                    }); //  end of typeahed of other Procedure
                    
                    
                     $("#case-prop-modal input.procedures-typeahead").typeahead({
                        // typeahead setup for case products 
                        minLength: 3,
                        
                        source: function(query, onSuccess) {
                            procedue_search = query;
                            //productTeam = $("#new-prefcard-modal input.pcard-productteam").val();
                            productTeam = $("#select-productteam").val();
                            query = query + '::' + 'procedure' + '::' + productTeam;
                            search(query, '{!$RemoteAction.CS_ARCCExtension.searchTaxonomy}', onSuccess);
                        },
                        displayText: function(item) {
                            return globalDecodeEntities(item.Name);
                        },
                        afterSelect: function(item) {
                            
                           // alert('Please select another Procedure'); 
                            $("#case-prop-modal .save-add-error").text("Procedure already exists. Please select another Procedure");
                            $("#case-prop-modal input.procedures-typeahead").val(procedue_search); 
                        }
                    }); //  end of typeahed of other Procedure
                    
                    
                     $("#case-prop-modal input.other-procedures-typeahead").typeahead({
                        // typeahead setup for case products 
                        minLength: 3,
                        
                        source: function(query, onSuccess) {
                            procedue_search = query; 
                            query = query + '::' + 'procedure';
                            search(query, '{!$RemoteAction.CS_ARCCExtension.searchTaxonomy}', onSuccess);
                        },
                        displayText: function(item) {
                            return globalDecodeEntities(item.Name);
                        },
                        afterSelect: function(item) {
                            
                            //alert('Please select another Procedure');
                            $("#case-prop-modal .save-add-error").text("Procedure already exists. Please select another Procedure");
                            $("#case-prop-modal input.procedures-typeahead").val(procedue_search); 
                        }
                    }); //  end of typeahed of other Procedure
                    
                }   //  end of initProcedureSearch
                
                function initSurgicalTechniqueSearch(){
                    $("#new-prefcard-modal input.surgical-technique-typeahead").typeahead({
                        // typeahead setup for case products 
                        minLength: 3,
                        
                        source: function(query, onSuccess) {
                            procedue_search = query;
                            //productTeam = $("#new-prefcard-modal input.pcard-productteam").val();
                            productTeam = $("#select-productteam").val();
                            query = query + '::' + 'surgical_technique' + '::' + productTeam;
                            search(query, '{!$RemoteAction.CS_ARCCExtension.searchTaxonomy}', onSuccess);
                        },
                        displayText: function(item) {
                            return globalDecodeEntities(item.Name);
                        },
                        afterSelect: function(item) {
                            
                            //alert('Please select another Procedure');
                            $("#new-prefcard-modal .save-add-error").text("Procedure already exists. Please select another Procedure");
                            $("#new-prefcard-modal input.surgical-technique-typeahead").val(procedue_search);
                        }
                    }); //  end of typeahed of other Procedure
                    
                }   //  end of initSurgicalTechniqueSearch
                
                
                function addOtherProcedure(){
                    
                    var modalSelector = "#case-prop-modal";
                    
                    if(($("#new-prefcard-modal").data('bs.modal') || {}).isShown){
                        modalSelector = "#new-prefcard-modal";
                    }
                    
                    var newProc = $(modalSelector + " #procedures").val(); 
                    console.log('##--addOtherProcedure.newProc: '+ newProc);
                    var newProcId = newProc + "newId";
                    var selectedProc = $(modalSelector + " #select-procedure").val();
                    
                    console.log('##--addOtherProcedure.selectedProc case: '+ selectedProc);
                     
                    var procedureExists;
                    console.log('##--selectedProc: '+ selectedProc);
                    selectedProc.pop();
                    selectedProc.push(newProcId); 
                    
                    if(! newProc){
                        //alert('Please enter valid procedure name');
                        $(modalSelector + " .save-add-error").text("Enter a valid procedure");
                        return false;
                    }
                    
                    existingNewItemLength = $(modalSelector + ' div.ctag-list.procedures span[data-record-id="'+newProcId+'"').length;
                    if(existingNewItemLength && existingNewItemLength>0){
                        $(modalSelector + " .save-add-error").text("Procedure already selected");
                        $('#procedures').val('');
                        return false;
                    }
                    
                     Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.checkIfProcedureAlreadyExists}",
                        newProc,
                        function(result, event) {
                        procedureExists = result;
                        console.log('##--addOtherProcedure.procedureExists: '+ procedureExists);
                        /*if(procedureExists == true){
                            $(modalSelector + " .save-add-error").text("The value already exists, please unselect Others in procedure and then select the Procedure "+ procedue_search);
                            return false;
                        }else{*/ 
                        $(modalSelector + " .save-add-error").text("");
                        $(modalSelector + " #procedures").val(''); 
                        console.log('##--result.Id: '+ result.Id);
                        if(result.Id != null){
                            newProcId = result.Id;
                            $(modalSelector + " #select-procedure option:last").before("<option value='"+result.Id+"'>"+newProc+"</option>");
                        } else{
                            $(modalSelector + " #select-procedure option:last").before("<option value='"+newProcId+"'>"+newProc+"</option>");
                        }
                        
                        $(modalSelector + " div.ctag-list.procedures").append(obj2ctag({Id: newProcId, Name:newProc}));
                        resetProcedureSelection(modalSelector);
                        //}
                    });
                    
                    
                }   //  end of addOtherProcedure
                
                function resetProcedureSelection(modalSelector){
                    var selectedProc = $(modalSelector + " #select-procedure").val();
                    $(modalSelector + " div#divProcedures").hide();
                    console.log('##--resetProcedureSelection.selectedProc: '+ selectedProc);
                    index = selectedProc.indexOf('Add Other');
                    if(index > -1){
                        selectedProc.splice(index, 1);
                    }
                    $(modalSelector + " #select-procedure").val(selectedProc); 
                    $(modalSelector + " #select-procedure").selectpicker('show');
                    $(modalSelector + " #select-procedure").selectpicker('refresh');
                }   //  end of resetProcedureSelection
                
                  function addTaxonomy(modalSelector) {

                    console.log('##--clicking addTaxonomy');
                    if ($(modalSelector + " button.btn-add-taxonomy").is(":disabled")) {
                        return false;
                    }
                    $(modalSelector + " span.save-error").text(""); 
                    var eleFound = false;
                    
                    prodVal = $(modalSelector + " #select-productteam").val();
                    prodId = $(modalSelector + " #select-productteam").attr("data-record-id");
                    console.log('prodVal:' + prodVal);
                    console.log('prodId:' + prodId);
                    var selectedProduct;
                    if(modalSelector == '#new-prefcard-modal'){
                        
                        selectedProduct = $('#new-prefcard-modal #select-productteam option[value="'+prodVal+'"]');
                    
                    }else{
                        
                        selectedProduct = $('#case-prop-modal #select-productteam option[value="'+prodVal+'"]');
                    }
                    //var selectedProduct = $('#select-productteam option[value="Elbow"]');
                    console.log('##--selectedProduct.val: '+ $(selectedProduct).val());
                    //console.log('##--selectedProduct: '+ JSON.stringify(selectedProduct));
                    var lstSelectedProcedures=[];
                    $(modalSelector + " div.procedures.ctag-list").children().each(function() { 
                        id = $(this).attr("data-record-id");
                        lstSelectedProcedures.push(id);
                    });
                        
                    console.log('##--lstSelectedProcedures:'+ lstSelectedProcedures);  
                    if(! $(selectedProduct).val()){
                        //alert("Please select a product team before you can add");
                        $(modalSelector + " .save-add-error").text("Select a product team");
                        return false;
                    }else if (lstSelectedProcedures != 'undefined' && lstSelectedProcedures.length == 0){
                        //alert("Product select atleast one procedure before you can add");
                        $(modalSelector + " .save-add-error").text("Select atleast one procedure");
                        return false;
                    }
                    
                    $.each($(modalSelector + " .productTeam tbody tr"), function(i, v) {
                        if ($(v).attr("data-productteam-id") == $(selectedProduct).attr("data-record-id")) {
                            eleFound = true;
                        }
                    });
                
                    if (eleFound) {
                        //alert("Product Team already added. Delete and add the product team");
                        $(modalSelector + " .save-add-error").text("Product Team already added. Delete and add the product team");
                    } else {
                        $(modalSelector + " .save-add-error").text("");
                        var lstProcedures;
                        proceduresNames = [];
                        $(modalSelector + " div.procedures.ctag-list").children().each(function() {
                            label = $(this).attr("data-label");
                            id = $(this).attr("data-record-id");
                            proceduresNames.push('<span class="form-control-static" data-record-id="'+id+'" data-label="'+label+'">'+label+'</span>');
                        });
                        lstProcedures = proceduresNames.join("; ");
                        
                        surgicalNames = [];
                        $(modalSelector + " div.surgical-technique.ctag-list").children().each(function() {
                            label = $(this).attr("data-label");
                            id = $(this).attr("data-record-id");
                            surgicalNames.push('<span class="form-control-static" data-record-id="'+id+'" data-label="'+label+'">'+label+'</span>');
                        });
                         
                       // var row_id = $.trim($(modalSelector + " .pcard-productteam-typeahead").attr("data-record-id"));
                        var row_id = $(selectedProduct).attr("data-record-id");
                        console.log('##--addTaxonomy.row_Id: '+ row_id);
                        $(modalSelector + " .productTeam tbody").append('<tr data-productteam-id="' + $(selectedProduct).attr("data-record-id") + '"><td class="product-marker"><p class="form-control-static">' + $(selectedProduct).val() + '</p></td><td class="procedures-marker">'+lstProcedures+' </td><td class="surgical-marker"> '+surgicalNames.join("; ")+' </td><td class="pull-right"><button type="button" class="btn btn-xs btn-primary pt-edit-btn" onclick="editTaxonomy(\''+modalSelector+'\', \''+row_id+'\')">Edit</button> &nbsp; <button type="button" class="btn btn-xs btn-danger pt-del-btn" onclick="$(this).parent().parent().remove()">Delete</button></td>');
                        
                        //  TODO: clear the fields
                        $(modalSelector + " .pcard-productteam-typeahead").removeAttr("data-record-id");
                        $(modalSelector + " .pcard-productteam-typeahead").val("");
                        $(modalSelector + " #select-productteam").val('');
                        $(modalSelector + " #select-procedure").empty();
                        $('#select-procedure').selectpicker('refresh');
                        $(modalSelector + " div.procedures.ctag-list").empty();
                        $('#select-surgical-technique').empty();
                        $('#select-surgical-technique').selectpicker('refresh');
                        $(modalSelector + " div.surgical-technique.ctag-list").empty();
                        $(modalSelector + " .save-add-error").text("");
                
                    }   //  end of else
                } //    end of addTaxonomy
                
                function displayPrefCardProdDetails(modalSelector, tableSelector, lstData, editable){
                    $(tableSelector + " tbody").empty();
                    
                    console.log('##--editable: '+ editable);
                    $.each(lstData, function(i, prod){
                        prodId = prod.productId;
                        prodName = prod.productName;
                        proceduresNames = [];
                        $.each(prod.mapProcedures, function(k, v){
                            id = k;
                            label = v;
                            
                            proceduresNames.push('<span class="form-control-static" data-record-id="'+id+'" data-label="'+label+'">'+label+'</span>');
                        });
                        
                        surgicalNames = [];
                        $.each(prod.mapSurgicalTechniques, function(k, v){
                            id = k;
                            label = v;
                            
                            surgicalNames.push('<span class="form-control-static" data-record-id="'+id+'" data-label="'+label+'">'+label+'</span>');
                        });
                        if(editable){
                            //console.log('##--prodId: '+ prodId);
                            //console.log('##--proceduresNames: '+ proceduresNames);
                            //console.log('##--surgicalNames: '+ surgicalNames);
                            //console.log('##--tableSelector: '+ tableSelector);
                            //console.log('##--modalSelector: '+ modalSelector);
                            
                            $(modalSelector + "  " + tableSelector + " tbody").append('<tr data-productteam-id="' + prodId + '"><td class="product-marker"><p class="form-control-static">' + prodName + '</p></td><td class="procedures-marker">'+proceduresNames.join("; ")+' </td><td class="surgical-marker"> '+surgicalNames.join("; ")+' </td><td class="pull-right"><button type="button" class="btn btn-xs btn-primary pt-edit-btn" onclick="editTaxonomy(\''+modalSelector+'\', \''+prodId+'\')">Edit</button> &nbsp; <button type="button" class="btn btn-xs btn-danger pt-del-btn" onclick="$(this).parent().parent().remove()">Delete</button></td>');
                            
                        }else{
                            $(modalSelector + "  " + tableSelector + " tbody").append('<tr data-productteam-id="' + prodId + '"><td class="product-marker"><p class="form-control-static">' + prodName + '</p></td><td class="procedures-marker">'+proceduresNames.join(", ")+' </td><td class="surgical-marker"> '+surgicalNames.join(", ")+' </td>');
                        }
                        
                    }); //  end of for-each lstData
                    
                }   //  end of displayPrefCardProdDetails
                
                function editTaxonomy(modalSelector, row_id){
                    
                    console.log('##--modalSelector: ' + modalSelector);
                    console.log('##--row_id: ' + row_id);
                    $.each($(modalSelector + " .productTeam tbody tr"), function(i, v) {
                        procIds=[];
                        surgIds=[];
                        console.log('inside productTeam');
                        console.log('##--row_id' + $(v).attr("data-productteam-id"));
                        if ($(v).attr("data-productteam-id") == row_id) {
                            product_label = $("td.product-marker", v).text();
                            console.log('##--product_label: '+ product_label);
                            //$("#new-prefcard-modal .pcard-productteam-typeahead").attr("data-record-id", row_id);
                            $(modalSelector + " #select-productteam").val(product_label);
                            productTeamSelected(modalSelector, product_label);
                            
                            $.each($("td.procedures-marker span", v), function(ci, cv){
                                id = $(cv).attr("data-record-id");
                                label = $(cv).attr("data-label");
                                console.log('##--id: '+ id);
                                console.log('##--label: '+ label);
                                $(modalSelector + " div.ctag-list.procedures").append(obj2ctag({Id: id, Name: label}));
                                procIds.push(id);
                            }); //  en dof for-each
                            
                            $.each($("td.surgical-marker span", v), function(ci, cv){
                                id = $(cv).attr("data-record-id");
                                label = $(cv).attr("data-label");
                                console.log('##--id: '+ id);
                                console.log('##--label: '+ label);
                                $(modalSelector + " div.ctag-list.surgical-technique").append(obj2ctag({Id: id, Name: label}));
                                surgIds.push(id);
                            }); //  en dof for-each
                            
                            /*
                            $(modalSelector + ' #select-procedure').selectpicker('val', procIds);
                            $(modalSelector + ' #select-surgical-technique').selectpicker('val', surgIds);
                            */ 
                            //$(modalSelector + " #select-procedure").val(procIds); 
                            //$(modalSelector + ' #select-surgical-technique').val(surgIds); 
                            //$(modalSelector + " #select-procedure").selectpicker('show'); 
                            //$(modalSelector + ' #select-procedure').selectpicker('refresh');
                            //$(modalSelector + ' #select-surgical-technique').selectpicker('refresh');
                            
                            console.log('##--procIds: '+ JSON.stringify(procIds));
                            console.log('##--surgIds: '+ JSON.stringify(surgIds));
                            $(this).remove(); 
                        }   //  end of outer IF
                    }); //  end of for-each tr
                    
                    
                }   //  end of editTaxonomy
                
                function productTeamSelected(modalSelector, val) {
                
                    console.log('##--productTeamSelected.val: '+ val);
                    if (!val) {
                        alert('Please select a Product Team.');
                        return false;
                    } 
                    
                    //  Change the procedure select box
                    $(modalSelector + " div#divProcedures").hide();
                    $(modalSelector + " #select-procedure").selectpicker('show');
                    $(modalSelector + " .save-add-error").text("");
                    $(modalSelector + " div.procedures.ctag-list").empty();
                    $(modalSelector + " div.surgical-technique.ctag-list").empty(); 
                   
                    Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.getAllRelatedProcedures}",
                        val,
                        function(result, event) {
                
                            $(modalSelector + ' #select-procedure').empty();
                
                            $.each(result, function(i, v) {
                                $(modalSelector + ' #select-procedure')
                                    .append($("<option></option>")
                                        .attr("data-record-id", v.Id)
                                        .attr("value", v.Id)
                                        .text(v.Name));
                            });
                            
                            if(val != 'Select Product Team'){
                                $(modalSelector + ' #select-procedure')
                                    .append($("<option></option>")
                                    .attr("value", "Add Other")
                                    .text("Add Other"));
                            }  
                
                            $(modalSelector + ' #select-procedure').selectpicker('refresh');
                
                        }); //  end of get related procedures
                        
                            //  Populate even the Surgical Technique
                        getSurgicalTechniques(modalSelector);
                    
                } //  end of productTeamSelected
                
                function getSurgicalTechniques(modalSelector){
                    
                    productTeam = $(modalSelector + ' #select-productteam').val();
                    setProcedures=$(modalSelector + ' #select-procedure').val();
                    
                    if(! setProcedures){
                        setProcedures=[];
                    }
                    
                    console.log('##--calling getSurgicalTechniques');
                    Visualforce.remoting.Manager.invokeAction("{!$RemoteAction.CS_ARCCExtension.getRelatedSurgicalTechniques}",
                        productTeam,
                        setProcedures,
                        function(result, event) {
                            
                            //console.log('##--deleting selected surgical technique');
                            $(modalSelector + ' #select-surgical-technique').empty();
                
                            $.each(result, function(i, v) {
                                $(modalSelector + ' #select-surgical-technique')
                                    .append($("<option></option>")
                                        .attr("data-record-id", v.Id)
                                        .attr("value", v.Id)
                                        .text(v.Name));
                            }); 
                            
                                //  Get the previously selected Surgical techniques and show them as selected
                            syncSurgicalTechniqueSelection(modalSelector)
                            
                            $(modalSelector + ' #select-surgical-technique').selectpicker('refresh');
                
                        }); //  end of get related surgical techniques
                
                    //$(modalSelector + " div.procedures.ctag-list").empty();
                    //$(modalSelector + " div.surgical-technique.ctag-list").empty();
                }   //  end of getSurgicalTechniques
                
                
                function syncSelectionAfterDelete(modalSelector){
                    //  Sync the Procedures
                    syncProcedureSelection(modalSelector);
                    $(modalSelector + ' #select-procedure').selectpicker('refresh');
                    getSurgicalTechniques(modalSelector);
                    
                    //  Sync the Surgical Techniques
                    syncSurgicalTechniqueSelection(modalSelector);
                    $(modalSelector + ' #select-surgical-technique').selectpicker('refresh');
                }   //  end of syncSelectionAfterDelete
                
                function syncProcedureSelection(modalSelector){
                    setProcedures=[];
                    $(modalSelector + ' div.ctag-list.procedures span').each(function(i, e){
                        setProcedures.push($(e).attr('data-record-id'));
                    }); //  end of for-each span
                    
                    if(setProcedures.length > 0){
                        $(modalSelector + ' #select-procedure').val(setProcedures);
                    }
                }   //  end of syncProcedureSelection
                
                
                function syncSurgicalTechniqueSelection(modalSelector){
                    var prevSurTechs=[];
                        
                    $(modalSelector + ' div.surgical-technique.ctag-list span').each(function(i, e){
                        prevSurTechs.push($(e).attr('data-record-id'));
                    }); //  end of for-each span
                    
                    if(prevSurTechs.length > 0){
                        $(modalSelector + ' #select-surgical-technique').val(prevSurTechs);
                    }
                }   //  end of syncSurgicalTechniqueSelection
    
                // start of notification jquery plugin
                $(document).ready(function() {
                    
                    (function ( $ ) {
                     
                        $.fn.inbox = function( options ) {
                            console.debug("Inbox plugin running");

                            var that = this;

                            // This is the easiest way to have default options.
                            var settings = $.extend({
                                unreadMsgEndpoint: "CS_ARTemplateCC.retrieveUnreadMessages"
                            }, options );

                            function setUnreadMsgCount() {
                                // retrieve the initial list of unread messages 
                                Visualforce.remoting.Manager.invokeAction(settings.unreadMsgEndpoint,
                                    function(result, event) {   
                                        if ( $.isNumeric(result) && result > 0 ) {
                                            that.find("span.inbox-badge").text(result);
                                            that.find("span.inbox-badge").show();
                                            // call refreshInbox if it exists, it will only
                                            // exist if ARInbox is on the screen
                                            if ( typeof window.refreshInbox !== "undefined") {
                                                refreshInbox();
                                            }
                                        } else {
                                            that.find("span.inbox-badge").text("");
                                            that.find("span.inbox-badge").hide();                                        
                                        }                
                                });
                            }

                            setUnreadMsgCount();

                            window.setInterval(function() {
                                console.log("-- checking for unread messages");
                                setUnreadMsgCount();
                            }, 10000);
                            
                            return this
                     
                        };
                     
                    }( jQuery ));                
                    // end of notification jquery plugin

                    $("#side-menu").inbox();

                    /*
                    function setUnreadMsgCount() {
                                // retrieve the initial list of unread messages 
                                Visualforce.remoting.Manager.invokeAction("CS_ARTemplateCC.retrieveUnreadMessages",
                                    function(result, event) {   
                                        if ( $.isNumeric(result) && result > 0 ) {
                                            $("span.inbox-badge").text(result);
                                            $("span.inbox-badge").show();
                                        } else {
                                            $("span.inbox-badge").text("");
                                            $("span.inbox-badge").hide();                                        
                                        }                
                                });
                    }
                    setUnreadMsgCount();

                    window.setTimeout(function() {
                                console.log("-- checking for unread messages");
                                setUnreadMsgCount();
                            }, 10000);
                    */
                });
                </script>  
            </body>
        </html>
    <!-- </apex:form> -->
</apex:page>